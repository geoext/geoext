Ext.define("GeoExt.util.Version",{statics:{isOl3:function(){return !!(ol.animation&&ol.Map.prototype.beforeRender)},isOl4:function(){return !this.isOl3()}}});Ext.define("GeoExt.mixin.SymbolCheck",{extend:"Ext.Mixin",inheritableStatics:{_checked:{},check:function(a){},normalizeSymbol:(function(){var a=function(b){};return a}()),checkSymbol:function(a,b){},isDefinedSymbol:function(a){}},onClassMixedIn:function(a){}});Ext.define("GeoExt.component.FeatureRenderer",{extend:"Ext.Component",alias:"widget.gx_renderer",requires:["GeoExt.util.Version"],mixins:["GeoExt.mixin.SymbolCheck"],config:{imgCls:"",minWidth:20,minHeight:20,resolution:1,feature:undefined,pointFeature:undefined,lineFeature:undefined,polygonFeature:undefined,textFeature:undefined,symbolizers:undefined,symbolType:"Polygon"},inheritableStatics:{determineStyle:function(a){var b=a.getFeature();return b.getStyle()||b.getStyleFunction()||(a.store?a.store.layer.getStyle():null)}},initComponent:function(){var b=this;var c=b.getId();b.autoEl={id:c,tag:"div","class":this.getImgCls()};if(!b.getLineFeature()){b.setLineFeature(new ol.Feature({geometry:new ol.geom.LineString([[-8,-3],[-3,3],[3,-3],[8,3]])}))}if(!b.getPointFeature()){b.setPointFeature(new ol.Feature({geometry:new ol.geom.Point([0,0])}))}if(!b.getPolygonFeature()){b.setPolygonFeature(new ol.Feature({geometry:new ol.geom.Polygon([[[-8,-4],[-6,-6],[6,-6],[8,-4],[8,4],[6,6],[-6,6],[-8,4]]])}))}if(!b.getTextFeature()){b.setTextFeature(new ol.Feature({geometry:new ol.geom.Point([0,0])}))}b.map=new ol.Map({controls:[],interactions:[],layers:[new ol.layer.Vector({source:new ol.source.Vector()})]});var a=b.getFeature();if(!a){b.setFeature(b["get"+b.getSymbolType()+"Feature"]())}else{b.applyFeature(a)}b.callParent()},onRender:function(){this.callParent(arguments);this.drawFeature()},afterRender:function(){this.callParent(arguments);this.initCustomEvents()},initCustomEvents:function(){var a=this;a.clearCustomEvents();a.el.on("click",a.onClick,a)},clearCustomEvents:function(){var a=this.el;if(a&&a.clearListeners){a.clearListeners()}},onClick:function(){this.fireEvent("click",this)},beforeDestroy:function(){var a=this;a.clearCustomEvents();if(a.map){a.map.setTarget(null)}},onResize:function(){this.setRendererDimensions();this.callParent(arguments)},drawFeature:function(){var a=this;a.map.setTarget(a.el.id);a.setRendererDimensions()},setRendererDimensions:function(){var h=this;var i=h.feature.getGeometry().getExtent();var k=ol.extent.getWidth(i);var g=ol.extent.getHeight(i);var e=h.initialConfig.resolution;if(!e){e=Math.max(k/h.width||0,g/h.height||0)||1}h.map.setView(new ol.View({minResolution:e,maxResolution:e,projection:new ol.proj.Projection({code:"",units:"pixels"})}));var c=Math.max(h.width||h.getMinWidth(),k/e);var j=Math.max(h.height||h.getMinHeight(),g/e);var b=ol.extent.getCenter(i);var f=c*e/2;var d=j*e/2;var a=[b[0]-f,b[1]-d,b[0]+f,b[1]+d];h.el.setSize(Math.round(c),Math.round(j));h.map.updateSize();if(GeoExt.util.Version.isOl3()){h.map.getView().fit(a,h.map.getSize())}else{h.map.getView().fit(a)}},applySymbolizers:function(b){var a=this.getFeature();if(a&&b){a.setStyle(b)}return b},applyFeature:function(a){var c=this.getSymbolizers();if(a&&c){a.setStyle(c)}if(this.map){var b=this.map.getLayers().item(0).getSource();b.clear();b.addFeature(a)}return a},update:function(a){if(a.feature){this.setFeature(a.feature)}if(a.symbolizers){this.setSymbolizers(a.symbolizers)}}});Ext.define("GeoExt.data.model.Base",{extend:"Ext.data.Model",requires:["Ext.data.identifier.Uuid"],identifier:"uuid",schema:{id:"geoext-schema",namespace:"GeoExt.data.model"},inheritableStatics:{loadRawData:function(d){var c=this;var a=c.getProxy().getReader().readRecords(d||{});var b=a.getRecords();var e=a.getSuccess();if(e&&b.length){return b[0]}}}});Ext.define("GeoExt.data.model.Layer",{extend:"GeoExt.data.model.Base",mixins:["GeoExt.mixin.SymbolCheck"],textProperty:"name",descriptionProperty:"description",unnamedLayerText:"Unnamed Layer",unnamedGroupLayerText:"Unnamed Group Layer",synchronizedProperties:["title"],fields:[{name:"isLayerGroup",type:"boolean",persist:false,convert:function(b,a){var c=a.getOlLayer();if(c){return(c instanceof ol.layer.Group)}else{return undefined}}},{name:"text",type:"string",persist:false,convert:function(c,a){var d=c;var e;var b;if(!d){b=a.textProperty;e=(a.get("isLayerGroup")?a.unnamedGroupLayerText:a.unnamedLayerText);d=a.getOlLayerProp(b,e)}return d}},{name:"opacity",type:"number",persist:false,convert:function(b,a){return a.getOlLayerProp("opacity")}},{name:"minResolution",type:"number",persist:false,convert:function(b,a){return a.getOlLayerProp("minResolution")}},{name:"maxResolution",type:"number",persist:false,convert:function(b,a){return a.getOlLayerProp("maxResolution")}},{name:"qtip",type:"string",persist:false,convert:function(b,a){return a.getOlLayerProp(a.descriptionProperty,"")}},{name:"qtitle",type:"string",persist:false,convert:function(b,a){return a.get("text")}}],proxy:{type:"memory",reader:{type:"json"}},getOlLayer:function(){if(this.data instanceof ol.layer.Base){return this.data}},getOlLayerProp:function(d,a){var b=this.getOlLayer();var c=(b?b.get(d):undefined);return(c!==undefined?c:a)}});Ext.define("GeoExt.data.store.Layers",{extend:"Ext.data.Store",alternateClassName:["GeoExt.data.LayerStore"],requires:["GeoExt.data.model.Layer"],mixins:["GeoExt.mixin.SymbolCheck"],model:"GeoExt.data.model.Layer",config:{map:null,layers:null,changeLayerFilterFn:null},constructor:function(a){var b=this;b.onAddLayer=b.onAddLayer.bind(b);b.onRemoveLayer=b.onRemoveLayer.bind(b);b.onChangeLayer=b.onChangeLayer.bind(b);b.callParent([a]);if(a.map){this.bindMap(a.map)}else{if(a.layers){this.bindLayers(a.layers)}}},bindLayers:function(d,c){var b=this;if(!b.layers){b.layers=d}if(b.layers instanceof ol.layer.Group){b.layers=b.layers.getLayers()}var a=b.layers;a.forEach(function(e){b.loadRawData(e,true)});a.forEach(function(e){b.bindLayer(e,b.getByLayer(e))});a.on("add",b.onAddLayer);a.on("remove",b.onRemoveLayer);b.on({load:b.onLoad,clear:b.onClear,add:b.onAdd,remove:b.onRemove,update:b.onStoreUpdate,scope:b});b.data.on({replace:b.onReplace,scope:b});b.fireEvent("bind",b,c)},bindMap:function(c){var b=this;if(!b.map){b.map=c}if(c instanceof ol.Map){var a=c.getLayers();b.bindLayers(a,c)}},bindLayer:function(b,a){var c=this;b.on("propertychange",c.onChangeLayer);Ext.Array.forEach(a.synchronizedProperties,function(d){c.synchronize(a,b,d)})},unbindLayers:function(){var a=this;if(a.layers){a.layers.un("add",a.onAddLayer);a.layers.un("remove",a.onRemoveLayer)}a.un("load",a.onLoad,a);a.un("clear",a.onClear,a);a.un("add",a.onAdd,a);a.un("remove",a.onRemove,a);a.un("update",a.onStoreUpdate,a);a.data.un("replace",a.onReplace,a)},unbindMap:function(){var a=this;a.unbindLayers();a.map=null},onChangeLayer:function(b){var c=b.target;var d=this.changeLayerFilterFn?this.changeLayerFilterFn.bind(c):undefined;var a=this.getByLayer(c,d);if(a!==undefined){if(b.key==="description"){a.set("qtip",c.get("description"));if(a.synchronizedProperties.indexOf("description")>-1){this.synchronize(a,c,"description")}}else{if(a.synchronizedProperties.indexOf(b.key)>-1){this.synchronize(a,c,b.key)}else{this.fireEvent("update",this,a,Ext.data.Record.EDIT,null,{})}}}},onAddLayer:function(b){var d=b.element;var c=this.layers.getArray().indexOf(d);var e=this;if(!e._adding){e._adding=true;var a=e.proxy.reader.read(d);e.insert(c,a.records);delete e._adding}e.bindLayer(d,e.getByLayer(d))},onRemoveLayer:function(a){var c=this;if(!c._removing){var b=a.element;var d=c.getByLayer(b);if(d){c._removing=true;b.un("propertychange",c.onChangeLayer);c.remove(d);delete c._removing}}},onLoad:function(d,c,h){var f=this;if(h){if(!Ext.isArray(c)){c=[c]}if(!f._addRecords){f._removing=true;f.layers.forEach(function(i){i.un("propertychange",f.onChangeLayer)});f.layers.getLayers().clear();delete f._removing}var a=c.length;if(a>0){var g=new Array(a);for(var e=0;e<a;e++){var b=c[e];g[e]=b.getOlLayer();f.bindLayer(g[e],b)}f._adding=true;f.layers.extend(g);delete f._adding}}delete f._addRecords},onClear:function(){var a=this;a._removing=true;a.layers.forEach(function(b){b.un("propertychange",a.onChangeLayer)});a.layers.clear();delete a._removing},onAdd:function(b,a,c){var g=this;if(!g._adding){g._adding=true;var e;for(var d=0,f=a.length;d<f;++d){e=a[d].getOlLayer();g.bindLayer(e,a[d]);if(c===0){g.layers.push(e)}else{g.layers.insertAt(c,e)}}delete g._adding}},onRemove:function(g,b){var f=this;var d;var e;var j;var c;var h;if(!f._removing){var a=function(i){if(i===e){j=true}};for(c=0,h=b.length;c<h;++c){d=b[c];e=d.getOlLayer();j=false;e.un("propertychange",f.onChangeLayer);f.layers.forEach(a);if(j){f._removing=true;f.removeMapLayer(d);delete f._removing}}}},onStoreUpdate:function(c,a,b,f){var e=this;if(b===Ext.data.Record.EDIT){if(f){var d=a.getOlLayer();Ext.Array.forEach(f,function(g){if(a.synchronizedProperties.indexOf(g)>-1){e.synchronize(d,a,g)}})}}},removeMapLayer:function(a){this.layers.remove(a.getOlLayer())},onReplace:function(b,a){this.removeMapLayer(a)},getByLayer:function(b,d){var c=this;var a;if(c.getData()){if(Ext.isFunction(d)){a=c.findBy(d)}else{a=c.findBy(function(e){return e.getOlLayer()===b})}if(a>-1){return c.getAt(a)}}},destroy:function(){this.unbindMap();this.callParent()},loadRecords:function(a,b){if(b&&b.addRecords){this._addRecords=true}this.callParent(arguments)},loadRawData:function(e,b){var d=this;var a=d.proxy.reader.read(e);var c=a.records;if(a.success){d.totalCount=a.total;d.loadRecords(c,b?d.addRecordsOptions:undefined);d.fireEvent("load",d,c,true)}},synchronize:function(a,c,d){var b=c.get(d);if(b!==a.get(d)){a.set(d,b)}}});Ext.define("GeoExt.component.Map",{extend:"Ext.Component",alias:["widget.gx_map","widget.gx_component_map"],requires:["GeoExt.data.store.Layers","GeoExt.util.Version"],mixins:["GeoExt.mixin.SymbolCheck"],stateEvents:["aftermapmove"],config:{map:null,pointerRest:false,pointerRestInterval:1000,pointerRestPixelTolerance:3,ignorePointerRestSelectors:[]},mapRendered:false,layerStore:null,lastPointerPixel:null,isMouseOverMapEl:null,constructor:function(a){var c=this;c.callParent([a]);if(!(c.getMap() instanceof ol.Map)){var b=new ol.Map({view:new ol.View({center:[0,0],zoom:2})});c.setMap(b)}c.layerStore=Ext.create("GeoExt.data.store.Layers",{storeId:c.getId()+"-store",map:c.getMap()});c.bindStateOlEvents();c.on("resize",c.onResize,c)},onResize:function(){var b=this;if(!b.mapRendered){var a=b.getTargetEl?b.getTargetEl():b.element;b.getMap().setTarget(a.dom);b.mapRendered=true}else{b.getMap().updateSize()}},bufferedPointerMove:Ext.emptyFn,unbufferedPointerMove:function(f){var e=this;var c=e.getPointerRestPixelTolerance();var d=f.pixel;if(e.isMouseOverIgnoreEl(f)){return}if(!e.isMouseOverMapEl){e.fireEvent("pointerrestout",f);return}if(e.lastPointerPixel){var b=Math.abs(e.lastPointerPixel[0]-d[0]);var a=Math.abs(e.lastPointerPixel[1]-d[1]);if(b>c||a>c){e.lastPointerPixel=d}else{e.fireEvent("pointerrest",f,e.lastPointerPixel);return}}else{e.lastPointerPixel=d}e.fireEvent("pointerrest",f,null)},isMouseOverIgnoreEl:function(){var c=this;var b=c.getIgnorePointerRestSelectors();if(b===undefined||b.length===0){return false}var a=Ext.query(":hover");return a.some(function(d){return b.some(function(e){return d.matches(e)})})},registerPointerRestEvents:function(){var a=this;var b=a.getMap();if(a.bufferedPointerMove===Ext.emptyFn){a.bufferedPointerMove=Ext.Function.createBuffered(a.unbufferedPointerMove,a.getPointerRestInterval(),a)}b.on("pointermove",a.bufferedPointerMove);if(!a.rendered){a.on("afterrender",a.bindOverOutListeners,a)}else{a.bindOverOutListeners()}},bindOverOutListeners:function(){var a=this;var b=a.getTargetEl?a.getTargetEl():a.element;if(b){b.on({mouseover:a.onMouseOver,mouseout:a.onMouseOut,scope:a})}},unbindOverOutListeners:function(){var a=this;var b=a.getTargetEl?a.getTargetEl():a.element;if(b){b.un({mouseover:a.onMouseOver,mouseout:a.onMouseOut,scope:a})}},onMouseOver:function(){this.isMouseOverMapEl=true},onMouseOut:function(){this.isMouseOverMapEl=false},unregisterPointerRestEvents:function(){var a=this;var b=a.getMap();a.unbindOverOutListeners();if(b){b.un("pointermove",a.bufferedPointerMove)}a.bufferedPointerMove=Ext.emptyFn},applyPointerRest:function(a){if(a){this.registerPointerRestEvents()}else{this.unregisterPointerRestEvents()}return a},applyPointerRestInterval:function(c){var b=this;var a=b.getPointerRest();if(a){b.setPointerRest(false);b.setPointerRest(a)}return c},getCenter:function(){return this.getMap().getView().getCenter()},setCenter:function(a){this.getMap().getView().setCenter(a)},getExtent:function(){return this.getView().calculateExtent(this.getMap().getSize())},setExtent:function(a){if(GeoExt.util.Version.isOl3()){this.getView().fit(a,this.getMap().getSize())}else{this.getView().fit(a)}},getLayers:function(){return this.getMap().getLayers()},addLayer:function(a){if(a instanceof ol.layer.Base){this.getMap().addLayer(a)}else{Ext.Error.raise("Can not add layer "+a+" as it is not an instance of ol.layer.Base")}},removeLayer:function(a){if(a instanceof ol.layer.Base){if(Ext.Array.contains(this.getLayers().getArray(),a)){this.getMap().removeLayer(a)}}else{Ext.Error.raise("Can not remove layer "+a+" as it is not an instance of ol.layer.Base")}},getStore:function(){return this.layerStore},getView:function(){return this.getMap().getView()},setView:function(a){this.getMap().setView(a)},bindStateOlEvents:function(){var b=this;var a=b.getMap();a.on("moveend",function(c){b.fireEvent("aftermapmove",b,a,c)})},getState:function(){var b=this;var a=b.getMap().getView();return{zoom:a.getZoom(),center:a.getCenter(),rotation:a.getRotation()}},applyState:function(b){if(!Ext.isObject(b)){return}var c=this;var a=c.getMap().getView();a.setCenter(b.center);a.setZoom(b.zoom);a.setRotation(b.rotation)}});Ext.define("GeoExt.util.Layer",{inheritableStatics:{cascadeLayers:function(b,a){if(!(b instanceof ol.layer.Group)){Ext.Logger.warn("No ol.layer.Group given to BasiGX.util.Layer.cascadeLayers. It is unlikely that this will work properly. Skipping!");return}if(!Ext.isFunction(a)){Ext.Logger.warn("No function passed this will not work. Skipping!");return}b.getLayers().forEach(function(c){a(c);if(c instanceof ol.layer.Group){GeoExt.util.Layer.cascadeLayers(c,a)}})},findParentGroup:function(b,c){var d;var a=GeoExt.util.Layer.findParentGroup;var e=GeoExt.util.Layer.getLayerIndex;if(e(b,c)!==-1){d=c}else{c.getLayers().forEach(function(f){if(!d&&f instanceof ol.layer.Group){d=a(b,f)}})}return d},getLayerIndex:function(b,c){var a=-1;c.getLayers().forEach(function(e,d){if(a===-1&&e===b){a=d}});return a}}});Ext.define("GeoExt.component.OverviewMap",{extend:"Ext.Component",alias:["widget.gx_overview","widget.gx_overviewmap","widget.gx_component_overviewmap"],requires:["GeoExt.util.Version","GeoExt.util.Layer"],mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{getVisibleExtentGeometries:function(g){var f=g&&g.getSize();var b=f&&f[0];var e=f&&f[1];if(!f||isNaN(b)||isNaN(e)){return}var i=[[0,0],[b,0],[b,e],[0,e],[0,0]];var a=[];Ext.each(i,function(h){var j=g.getCoordinateFromPixel(h);if(j===null){return false}a.push(j)});if(a.length!==5){return}var d=new ol.geom.Polygon([a]);var c=new ol.geom.Point(a[0]);return{extent:d,topLeft:c}}},config:{anchorStyle:null,boxStyle:null,layers:[],magnification:5,map:null,parentMap:null,recenterOnClick:true,enableBoxDrag:true,recenterDuration:500},boxFeature:null,anchorFeature:null,extentLayer:null,dragInteraction:null,mapRendered:false,constructor:function(){this.initOverviewFeatures();this.callParent(arguments)},initComponent:function(){var a=this;if(!a.getParentMap()){Ext.Error.raise("No parentMap defined for overviewMap")}else{if(!(a.getParentMap() instanceof ol.Map)){Ext.Error.raise("parentMap is not an instance of ol.Map")}}a.initOverviewMap();a.on("beforedestroy",a.onBeforeDestroy,a);a.on("resize",a.onResize,a);a.on("afterrender",a.updateBox,a);a.callParent()},initOverviewFeatures:function(){var a=this;a.boxFeature=new ol.Feature();a.anchorFeature=new ol.Feature();a.extentLayer=new ol.layer.Vector({source:new ol.source.Vector()})},initOverviewMap:function(){var c=this;var d=c.getParentMap();var e=c.getMap();c.getLayers().push(c.extentLayer);if(!e){var b=d.getView();var a=new ol.Map({controls:new ol.Collection(),interactions:new ol.Collection(),view:new ol.View({center:b.getCenter(),zoom:b.getZoom(),projection:b.getProjection()})});c.setMap(a)}else{if(e.getView()&&!e.getView().getCenter()){e.getView().setCenter([0,0])}}GeoExt.util.Layer.cascadeLayers(d.getLayerGroup(),function(f){if(c.getLayers().indexOf(f)>-1){throw new Error("OverviewMap cannot use layers of the parent map. (Since ol v6.0.0 maps cannot share layers anymore)")}});Ext.each(c.getLayers(),function(f){c.getMap().addLayer(f)});d.getView().on("propertychange",c.onParentViewPropChange.bind(c));c.enableBoxUpdate();c.setOverviewMapProperty("center");c.setOverviewMapProperty("resolution");c.extentLayer.getSource().addFeatures([c.boxFeature,c.anchorFeature])},setupDragBehaviour:function(){var a=this;var b=new ol.interaction.Translate({features:new ol.Collection([a.boxFeature])});a.getMap().addInteraction(b);b.setActive(true);b.on("translatestart",a.disableBoxUpdate.bind(a));b.on("translating",a.repositionAnchorFeature.bind(a));b.on("translateend",a.recenterParentFromBox.bind(a));b.on("translateend",a.enableBoxUpdate.bind(a));a.dragInteraction=b},disableBoxUpdate:function(){var a=this;var b=a.getParentMap();if(b){b.un("postrender",a.updateBox,a)}},enableBoxUpdate:function(){var a=this;var b=a.getParentMap();if(b){b.on("postrender",a.updateBox.bind(a))}},destroyDragBehaviour:function(){var a=this;var b=a.dragInteraction;if(!b){return}b.setActive(false);a.getMap().removeInteraction(b);b.un("translatestart",a.disableBoxUpdate,a);b.un("translating",a.repositionAnchorFeature,a);b.un("translateend",a.recenterParentFromBox,a);b.un("translateend",a.enableBoxUpdate,a);a.dragInteraction=null},repositionAnchorFeature:function(){var c=this;var b=c.boxFeature.getGeometry().getCoordinates();var a=b[0][0];var d=new ol.geom.Point(a);c.anchorFeature.setGeometry(d)},recenterParentFromBox:function(){var g=this;var a=g.getParentMap();var k=a.getView();var f=k.getProjection();var d=g.getMap();var i=d.getView();var b=i.getProjection();var c=k.getCenter();var h=g.boxFeature.getGeometry().getExtent();var j=ol.extent.getCenter(h);if(!ol.proj.equivalent(f,b)){j=ol.proj.transform(j,b,f)}if(GeoExt.util.Version.isOl3()){var e=ol.animation.pan({duration:g.getRecenterDuration(),source:c});a.beforeRender(e);k.setCenter(j)}else{k.animate({center:j})}},onParentViewPropChange:function(a){if(a.key==="center"||a.key==="resolution"){this.setOverviewMapProperty(a.key)}},overviewMapClicked:function(j){var h=this;var a=h.getParentMap();var k=a.getView();var g=k.getProjection();var d=k.getCenter();var e=h.getMap();var i=e.getView();var c=i.getProjection();var b=j.coordinate;if(!ol.proj.equivalent(g,c)){b=ol.proj.transform(b,c,g)}if(GeoExt.util.Version.isOl3()){var f=ol.animation.pan({duration:h.getRecenterDuration(),source:d});a.beforeRender(f);k.setCenter(b)}else{k.animate({center:b})}},updateBox:function(){var e=this;var f=e.getParentMap();var c=e.self.getVisibleExtentGeometries(f);if(!c){return}var d=c.extent;var b=c.topLeft;var a=f.getView().getProjection();var g=e.getMap().getView().getProjection();if(!ol.proj.equivalent(a,g)){d.transform(a,g);b.transform(a,g)}e.boxFeature.setGeometry(d);e.anchorFeature.setGeometry(b)},setOverviewMapProperty:function(h){var f=this;var i=f.getParentMap().getView();var d=i.getProjection();var g=f.getMap().getView();var a=g.getProjection();var b=i.getCenter();if(h==="center"){if(!ol.proj.equivalent(d,a)){b=ol.proj.transform(b,d,a)}g.set("center",b)}if(h==="resolution"){if(ol.proj.equivalent(d,a)){g.set("resolution",f.getMagnification()*i.getResolution())}else{if(f.mapRendered===true){var e=i.calculateExtent(f.getParentMap().getSize());var c=ol.proj.transformExtent(e,d,a);g.fit(c);g.set("resolution",f.getMagnification()*g.getResolution())}}}},applyRecenterOnClick:function(a){var b=this;var c=b.getMap();if(!c){b.addListener("afterrender",function(){b.setRecenterOnClick(a)},b,{single:true});return a}if(a){c.on("click",b.overviewMapClicked.bind(b))}else{c.un("click",b.overviewMapClicked.bind(b))}return a},applyEnableBoxDrag:function(a){var b=this;var c=b.getMap();if(!c){b.addListener("afterrender",function(){b.setEnableBoxDrag(a)},b,{single:true});return a}if(a){b.setupDragBehaviour()}else{b.destroyDragBehaviour()}return a},onBeforeDestroy:function(){var b=this;var d=b.getMap();var c=b.getParentMap();var a=c&&c.getView();if(d){d.un("click",b.overviewMapClicked,b)}b.destroyDragBehaviour();if(c){b.disableBoxUpdate();a.un("propertychange",b.onParentViewPropChange,b)}},onResize:function(){var a=this;var c=a.getEl().dom;var b=a.getMap();if(!a.mapRendered){b.setTarget(c);a.mapRendered=true;a.setOverviewMapProperty("resolution")}else{a.getMap().updateSize()}},applyAnchorStyle:function(a){this.anchorFeature.setStyle(a);return a},applyBoxStyle:function(a){this.boxFeature.setStyle(a);return a}});Ext.define("GeoExt.component.Popup",{requires:[],extend:"Ext.Component",alias:["widget.gx_popup","widget.gx_component_popup"],config:{overlay:null,map:null},overlayElement:null,overlayElementCreated:false,cls:"gx-popup",constructor:function(b){var c=this;var a=b||{};var d;if(!Ext.isDefined(a.map)){Ext.Error.raise("Required configuration 'map' not passed")}if(Ext.isDefined(a.renderTo)){d=Ext.get(a.renderTo).dom}else{d=Ext.dom.Helper.append(Ext.getBody(),"<div>");c.overlayElementCreated=true}a.renderTo=d;c.overlayElement=d;c.callParent([a])},initComponent:function(){var a=this;a.updateLayout=a.updateLayout.bind(a);a.on({afterrender:a.setOverlayElement,beforedestroy:a.onBeforeDestroy,scope:a});a.callParent();a.setupOverlay()},setupOverlay:function(){var b=this;var a=new ol.Overlay({autoPan:true,autoPanAnimation:{duration:250}});b.getMap().addOverlay(a);a.on("change:position",b.updateLayout);b.setOverlay(a)},setOverlayElement:function(){this.getOverlay().set("element",this.overlayElement)},position:function(b){var a=this;a.getOverlay().setPosition(b)},onBeforeDestroy:function(){var b=this;if(b.overlayElementCreated&&b.overlayElement){var a=b.overlayElement.parentNode;a.removeChild(b.overlayElement)}b.getOverlay().un("change:position",b.doLayout)}});Ext.define("GeoExt.data.model.print.LayoutAttribute",{extend:"GeoExt.data.model.Base",fields:[{name:"name",type:"string"},{name:"type",type:"string"},{name:"clientInfo",type:"auto"},{name:"layoutId",reference:{type:"print.Layout",inverse:"attributes"}}]});Ext.define("GeoExt.data.model.print.Layout",{extend:"GeoExt.data.model.Base",requires:["GeoExt.data.model.print.LayoutAttribute"],fields:[{name:"name",type:"string"},{name:"capabilityId",reference:{type:"print.Capability",inverse:"layouts"}}]});Ext.define("GeoExt.data.model.print.Capability",{extend:"GeoExt.data.model.Base",requires:["GeoExt.data.model.print.Layout"],fields:[{name:"app",type:"string"},{name:"formats",type:"auto",defaultValue:[]}]});Ext.define("GeoExt.data.MapfishPrintProvider",{extend:"Ext.Base",mixins:["Ext.mixin.Observable","GeoExt.mixin.SymbolCheck"],requires:["GeoExt.data.model.print.Capability","Ext.data.JsonStore","Ext.data.Store","Ext.data.proxy.Ajax","Ext.data.proxy.JsonP"],config:{capabilities:null,url:"",useJsonp:true},inheritableStatics:{_serializers:[],registerSerializer:function(c,b){var a=GeoExt.data.MapfishPrintProvider;a._serializers.push({olSourceCls:c,serializerCls:b})},unregisterSerializer:function(b){var c=GeoExt.data.MapfishPrintProvider._serializers;var a;Ext.each(c,function(e,d){if(e.serializerCls===b){a=d;return false}});if(Ext.isDefined(a)){Ext.Array.removeAt(c,a);return true}return false},findSerializerBySource:function(c){var b=GeoExt.data.MapfishPrintProvider._serializers;var a;Ext.each(b,function(d){if(c instanceof d.olSourceCls){a=d.serializerCls;return false}});if(!a){Ext.log.warn("Couldn't find a suitable serializer for source. Did you require() an appropriate serializer class?")}return a},getLayerArray:function(b){var c=this;var a=[];var d=[];if(b instanceof GeoExt.data.store.Layers){b.each(function(f){var e=f.getOlLayer();a.push(e)})}else{if(b instanceof ol.Collection){a=Ext.clone(b.getArray())}else{a=Ext.clone(b)}}a.forEach(function(e){if(e instanceof ol.layer.Group){Ext.each(c.getLayerArray(e.getLayers()),function(f){d.push(f)})}else{d.push(e)}});return d},getSerializedLayers:function(f,e,d){var c=f.getLayers();var b=f.getView().getResolution();var g=[];var a=this.getLayerArray(c);if(Ext.isDefined(e)){a=Ext.Array.filter(a,e,d)}Ext.each(a,function(h){var j=h.getSource();var k={};var i=this.findSerializerBySource(j);if(i){k=i.serialize(h,j,b,f.map);g.push(k)}},this);return g},renderPrintExtent:function(l,c,g){var h=l.getWidth();var b=l.getHeight();var j=h/b;var k=0.6;var d=g.width/g.height;var i;var e;var a;var f;if(d>=j){i=h*k;e=i/d}else{e=b*k;i=e*d}a=l.getView().calculateExtent([i,e]);f=new ol.Feature(ol.geom.Polygon.fromExtent(a));c.getSource().addFeature(f);return f}},capabilityRec:null,constructor:function(a){this.mixins.observable.constructor.call(this,a);if(!a.capabilities&&!a.url){Ext.Error.raise("Print capabilities or Url required")}this.initConfig(a);this.fillCapabilityRec()},fillCapabilityRec:function(){var b;var a=this.getCapabilities();var c=this.getUrl();var e=function(){this.capabilityRec=b.getAt(0);if(!this.capabilityRec){this.fireEvent("error",this)}else{this.fireEvent("ready",this)}};if(a){b=Ext.create("Ext.data.JsonStore",{model:"GeoExt.data.model.print.Capability",listeners:{datachanged:e,scope:this}});b.loadRawData(a)}else{if(c){var d={url:c};if(this.getUseJsonp()){d.type="jsonp";d.callbackKey="jsonp"}else{d.type="ajax";d.reader={type:"json"}}b=Ext.create("Ext.data.Store",{autoLoad:true,model:"GeoExt.data.model.print.Capability",proxy:d,listeners:{load:e,scope:this}})}}}});Ext.define("GeoExt.data.model.ArcGISRestServiceLayer",{extend:"GeoExt.data.model.Base",fields:[{name:"layerId",type:"int"},{name:"name",type:"string"},{name:"defaultVisibility",type:"boolean"},{name:"visibility",type:"boolean"}]});Ext.define("GeoExt.data.model.OlObject",{extend:"GeoExt.data.model.Base",mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{getOlCLassRef:function(c){var b=ol;var a;if(Ext.isString(c)){a=c.split(".");if(Ext.Array.indexOf(a,"ol")===0){a.shift()}Ext.Array.each(a,function(d){b=b[d]})}return b}},olClass:"ol.Object",olObject:null,proxy:{type:"memory",reader:"json"},constructor:function(b){var a=this;var c=this.statics();var d=c.getOlCLassRef(this.olClass);b=b||{};if(!(b instanceof d)){b=new d(b)}a.olObject=b;a.callParent([this.olObject.getProperties()]);a.onPropertychange=a.onPropertychange.bind(a);a.olObject.on("propertychange",a.onPropertychange)},onPropertychange:function(a){var c=a.target;var b=a.key;if(!this.__updating){this.set(b,c.get(b))}},set:function(a,b){var c={};this.callParent(arguments);this.__updating=true;if(Ext.isString(a)){c[a]=b}else{c=a}Ext.Object.each(c,function(e,d){if(this.olObject.get(e)!==d){this.olObject.set(e,d)}},this);this.__updating=false},destroy:function(){this.olObject.un("propertychange",this.onPropertychange);this.callParent(arguments)}});Ext.define("GeoExt.data.model.Feature",{extend:"GeoExt.data.model.OlObject",getFeature:function(){return this.olObject}});Ext.define("GeoExt.data.model.LayerTreeNode",{extend:"GeoExt.data.model.Layer",requires:["Ext.data.NodeInterface"],mixins:["Ext.mixin.Queryable","GeoExt.mixin.SymbolCheck"],fields:[{name:"leaf",type:"boolean",convert:function(b,a){var c=a.get("isLayerGroup");if(c===undefined||c){return false}else{return true}}},{name:"__toggleMode",type:"string",defaultValue:"classic"},{name:"iconCls",type:"string",convert:function(b,a){return a.getOlLayerProp("iconCls")}}],proxy:{type:"memory",reader:{type:"json"}},constructor:function(){var a;this.callParent(arguments);a=this.getOlLayer();if(a instanceof ol.layer.Base){this.set("checked",a.get("visible"));a.on("change:visible",this.onLayerVisibleChange.bind(this))}},onLayerVisibleChange:function(a){var b=a.target;if(!this.__updating){this.set("checked",b.get("visible"))}},set:function(a,d){var b=this;var c=(b.get("__toggleMode")==="classic");b.callParent(arguments);if(a==="checked"){if(b.get("__toggleMode")==="ol3"){b.getOlLayer().set("visible",d);return}b.__updating=true;if(b.get("isLayerGroup")&&c){b.getOlLayer().set("visible",d);if(b.childNodes){b.eachChild(function(e){e.getOlLayer().set("visible",d)})}}else{b.getOlLayer().set("visible",d)}b.__updating=false;if(c){b.toggleParentNodes(d)}}},toggleParentNodes:function(b){var a=this;if(b===true){a.__updating=true;a.bubble(function(c){if(!c.isRoot()){c.set("__toggleMode","ol3");c.set("checked",true);c.set("__toggleMode","classic")}});a.__updating=false}if(b===false){a.__updating=true;a.bubble(function(d){if(!d.isRoot()){var c=true;d.eachChild(function(e){if(e.get("checked")){c=false}});if(c){d.set("__toggleMode","ol3");d.set("checked",false);d.set("__toggleMode","classic")}}});a.__updating=false}},getRefItems:function(){return this.childNodes},getRefOwner:function(){return this.parentNode}},function(){Ext.data.NodeInterface.decorate(this)});Ext.define("GeoExt.data.serializer.Base",{extend:"Ext.Base",requires:["GeoExt.data.MapfishPrintProvider"],mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{sourceCls:null,serialize:function(){Ext.raise("This method must be overridden by subclasses.");return null},register:function(a){GeoExt.data.MapfishPrintProvider.registerSerializer(a.sourceCls,a)},validateSource:function(a){if(!(a instanceof this.sourceCls)){Ext.raise("Cannot serialize this source with this serializer")}}}});Ext.define("GeoExt.data.serializer.ImageWMS",{extend:"GeoExt.data.serializer.Base",mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{sourceCls:ol.source.ImageWMS,serialize:function(b,d){this.validateSource(d);var c=d.getParams().STYLES;var a;if(Ext.isArray(c)){a=c}else{a=c?c.split(","):[""]}var e={baseURL:d.getUrl(),customParams:d.getParams(),layers:[d.getParams().LAYERS],opacity:b.getOpacity(),styles:a,type:"WMS"};return e}}},function(a){a.register(a)});Ext.define("GeoExt.data.serializer.TileWMS",{extend:"GeoExt.data.serializer.Base",mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{sourceCls:ol.source.TileWMS,serialize:function(b,d){this.validateSource(d);var c=d.getParams().STYLES;var a;if(Ext.isArray(c)){a=c}else{a=c?c.split(","):[""]}var e={baseURL:d.getUrls()[0],customParams:d.getParams(),layers:[d.getParams().LAYERS],opacity:b.getOpacity(),styles:a,type:"WMS"};return e}}},function(a){a.register(a)});Ext.define("GeoExt.data.serializer.Vector",{extend:"GeoExt.data.serializer.Base",mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{PRINTSTYLE_TYPES:{POINT:"Point",LINE_STRING:"LineString",POLYGON:"Polygon"},GEOMETRY_TYPE_TO_PRINTSTYLE_TYPE:{},FALLBACK_SERIALIZATION:{geoJson:{type:"FeatureCollection",features:[]},opacity:1,style:{version:"2","*":{symbolizers:[{type:"point",strokeColor:"white",strokeOpacity:1,strokeWidth:4,strokeDashstyle:"solid",fillColor:"red"}]}},type:"geojson"},FEAT_STYLE_PREFIX:"_gx3_style_",GX_UID_PROPERTY:"__gx_uid__",format:new ol.format.GeoJSON(),sourceCls:ol.source.Vector,serialize:function(h,a,d,b){var j=this;j.validateSource(a);var l;if(b){l=b.getView().calculateExtent()}var k=j.format;var e=[];var c={version:2};var g=function(p){var r=p.getGeometry();if(Ext.isEmpty(r)){return}var n=r.getType();var m=k.writeFeatureObject(p);if(m.properties&&m.properties.parentFeature){m.properties.parentFeature=undefined}var q=null;var o=p.getStyleFunction();if(Ext.isDefined(o)){q=o(p,d)}else{o=h.getStyleFunction();if(Ext.isDefined(o)){q=o(p,d)}}if(!Ext.isArray(q)){q=[q]}if(!Ext.isEmpty(q)){e.push(m);if(Ext.isEmpty(m.properties)){m.properties={}}Ext.each(q,function(v,u){var t=j.getUid(v,n);var s=j.FEAT_STYLE_PREFIX+u;j.encodeVectorStyle(c,n,v,t,s);m.properties[s]=t})}};if(l){a.forEachFeatureInExtent(l,g)}else{Ext.each(a.getFeatures(),g)}var f;if(e.length>0){var i={type:"FeatureCollection",features:e};f={geoJson:i,opacity:h.getOpacity(),style:c,type:"geojson"}}else{f=this.FALLBACK_SERIALIZATION}return f},encodeVectorStyle:function(t,a,o,e,v){var r=this;var s=r.PRINTSTYLE_TYPES;var d=r.GEOMETRY_TYPE_TO_PRINTSTYLE_TYPE;if(!Ext.isDefined(d[a])){return}var i=d[a];var u="["+v+" = '"+e+"']";if(Ext.isDefined(t[u])){return}var b={symbolizers:[]};t[u]=b;var h=o.getFill();var l=o.getImage();var n=o.getStroke();var g=o.getText();var c=!Ext.isEmpty(h);var m=!Ext.isEmpty(l);var k=!Ext.isEmpty(n);var j=!Ext.isEmpty(g);var q=s.POLYGON;var f=s.LINE_STRING;var p=s.POINT;if(i===q&&c){r.encodeVectorStylePolygon(b.symbolizers,h,n)}else{if(i===f&&k){r.encodeVectorStyleLine(b.symbolizers,n)}else{if(i===p&&m){r.encodeVectorStylePoint(b.symbolizers,l)}}}if(j){r.encodeTextStyle(b.symbolizers,g)}},encodeVectorStylePolygon:function(d,a,c){var b={type:"polygon"};this.encodeVectorStyleFill(b,a);if(c!==null){this.encodeVectorStyleStroke(b,c)}d.push(b)},encodeVectorStyleLine:function(c,b){var a={type:"line"};this.encodeVectorStyleStroke(a,b);c.push(a)},encodeVectorStylePoint:function(g,e){var k;if(e instanceof ol.style.Circle){k={type:"point"};k.pointRadius=e.getRadius();var i=e.getFill();if(i!==null){this.encodeVectorStyleFill(k,i)}var f=e.getStroke();if(f!==null){this.encodeVectorStyleStroke(k,f)}}else{if(e instanceof ol.style.Icon){var a=e.getSrc();if(Ext.isDefined(a)){var c=e.getImage(window.devicePixelRatio||1);var b=document.createElement("canvas");b.width=c.naturalWidth||c.width;b.height=c.naturalHeight||c.height;b.getContext("2d").drawImage(c,0,0);var h="image/"+a.match(/\.(\w+)$/)[1];k={type:"point",externalGraphic:b.toDataURL(),graphicFormat:h};var j=e.getRotation();if(j!==0){var d=j*180/Math.PI;k.rotation=d}}}}if(Ext.isDefined(k)){g.push(k)}},encodeTextStyle:function(l,j){var q={type:"Text"};var m=j.getText();if(!Ext.isDefined(m)){return}q.label=m;var c=j.getTextAlign();if(Ext.isDefined(c)){q.labelAlign=c}var o=j.getRotation();if(Ext.isDefined(o)){var a=(o*180/Math.PI)+"";q.labelRotation=a}var h=j.getOffsetX();var g=j.getOffsetY();if(h){q.labelXOffset=h}if(g){q.labelYOffset=-g}var f=j.getFont();if(Ext.isDefined(f)){var d=document.createElement("span");d.style.font=f;q.fontWeight=d.style.fontWeight;q.fontSize=d.style.fontSize;q.fontFamily=d.style.fontFamily;q.fontStyle=d.style.fontStyle}var k=j.getStroke();if(k!==null&&k.getColor()){var p=k.getColor();var e=ol.color.asArray(p);q.haloColor=this.rgbArrayToHex(e);q.haloOpacity=e[3];var b=k.getWidth();if(Ext.isDefined(b)){q.haloRadius=b}}var n=j.getFill();if(n!==null&&n.getColor()){var i=ol.color.asArray(n.getColor());q.fontColor=this.rgbArrayToHex(i)}if(Ext.isDefined(q.labelAlign)){q.labelXOffset=j.getOffsetX();q.labelYOffset=-j.getOffsetY()}l.push(q)},encodeVectorStyleFill:function(c,a){var d=a.getColor();if(d!==null){var b=ol.color.asArray(d);c.fillColor=this.rgbArrayToHex(b);c.fillOpacity=b[3]}},encodeVectorStyleStroke:function(a,e){var b=e.getColor();if(b!==null){var c=ol.color.asArray(b);a.strokeColor=this.rgbArrayToHex(c);a.strokeOpacity=c[3]}var d=e.getWidth();if(Ext.isDefined(d)){a.strokeWidth=d}},padHexValue:function(a){return a.length===1?"0"+a:a},rgbToHex:function(f,e,a){f=Number(f);e=Number(e);a=Number(a);if(isNaN(f)||f<0||f>255||isNaN(e)||e<0||e>255||isNaN(a)||a<0||a>255){Ext.raise('"('+f+","+e+","+a+'") is not a valid  RGB color')}var d=this.padHexValue(f.toString(16));var c=this.padHexValue(e.toString(16));var h=this.padHexValue(a.toString(16));return"#"+d+c+h},rgbArrayToHex:function(a){return this.rgbToHex(a[0],a[1],a[2])},getUid:function(c,a){if(!Ext.isObject(c)){Ext.raise("Cannot get uid of non-object.")}var b=this.GX_UID_PROPERTY;if(a){b+="-"+a}if(!Ext.isDefined(c[b])){c[b]=Ext.id()}return c[b]}}},function(a){var d={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"};var c=a.PRINTSTYLE_TYPES;var b={};b[d.POINT]=c.POINT;b[d.MULTI_POINT]=c.POINT;b[d.LINE_STRING]=c.LINE_STRING;b[d.MULTI_LINE_STRING]=c.LINE_STRING;b[d.POLYGON]=c.POLYGON;b[d.MULTI_POLYGON]=c.POLYGON;a.GEOMETRY_TYPE_TO_PRINTSTYLE_TYPE=b;a.register(a)});Ext.define("GeoExt.data.serializer.WMTS",{extend:"GeoExt.data.serializer.Base",mixins:["GeoExt.mixin.SymbolCheck"],inheritableStatics:{sourceCls:ol.source.WMTS,serialize:function(e,a){this.validateSource(a);var f=a.getProjection();var i=a.getTileGrid();var b=a.getDimensions();var g=Ext.Object.getKeys(b);var c=i.getMatrixIds();var h=[];Ext.each(c,function(l,k){var j=Math.pow(2,k);h.push({identifier:l,scaleDenominator:i.getResolution(k)*f.getMetersPerUnit()/0.00028,tileSize:ol.size.toSize(i.getTileSize(k)),topLeftCorner:i.getOrigin(k),matrixSize:[j,j]})});var d={baseURL:a.getUrls()[0],dimensions:g,dimensionParams:b,imageFormat:a.getFormat(),layer:a.getLayer(),matrices:h,matrixSet:a.getMatrixSet(),opacity:e.getOpacity(),requestEncoding:a.getRequestEncoding(),style:a.getStyle(),type:"WMTS",version:a.getVersion()};return d}}},function(a){a.register(a)});Ext.define("GeoExt.data.serializer.XYZ",{extend:"GeoExt.data.serializer.Base",mixins:["GeoExt.mixin.SymbolCheck"],symbols:["ol.layer.Base#getOpacity","ol.size.toSize","ol.source.XYZ","ol.source.XYZ#getTileGrid","ol.source.XYZ#getUrls","ol.tilegrid.TileGrid#getResolutions","ol.tilegrid.TileGrid#getTileSize"],inheritableStatics:{allowedImageExtensions:["png","jpg","gif"],sourceCls:ol.source.XYZ,validateSource:function(a){if(!(a instanceof this.sourceCls)){Ext.raise("Cannot serialize this source with this serializer")}if(a.getUrls()===null){Ext.raise("Cannot serialize this source without an URL. Usage of tileUrlFunction is not yet supported")}},serialize:function(a,c){this.validateSource(c);var b=c.getTileGrid();var d={baseURL:c.getUrls()[0],opacity:a.getOpacity(),imageExtension:this.getImageExtensionFromSource(c)||"png",resolutions:b.getResolutions(),tileSize:ol.size.toSize(b.getTileSize()),type:"OSM"};return d},getImageExtensionFromSource:function(b){var c=b.getUrls();var a=c?c[0]:"";var d=a.substr(a.length-3);if(Ext.isDefined(a)&&Ext.Array.contains(this.allowedImageExtensions,d)){return d}else{Ext.raise("No url(s) supplied for ",b);return false}}}},function(a){a.register(a)});Ext.define("GeoExt.data.store.ArcGISRestServiceLayer",{extend:"Ext.data.Store",requires:["GeoExt.data.model.ArcGISRestServiceLayer"],model:"GeoExt.data.model.ArcGISRestServiceLayer"});Ext.define("GeoExt.data.store.OlObjects",{extend:"Ext.data.Store",requires:["GeoExt.data.model.OlObject"],mixins:["GeoExt.mixin.SymbolCheck"],olCollection:null,model:"GeoExt.data.model.OlObject",proxy:{type:"memory",reader:"json"},listeners:{add:function(b,a,c){var e=b.olCollection;var f=a.length;var d;b.__updating=true;for(d=0;d<f;d++){if(!Ext.Array.contains(b.olCollection.getArray(),a[d].olObject)){e.insertAt(c+d,a[d].olObject)}}b.__updating=false},remove:function(b,a,c){var d=b.olCollection;b.__updating=true;Ext.each(a,function(e){d.remove(e.olObject)});b.__updating=false}},constructor:function(a){a=a||{};if(a.data instanceof ol.Collection){this.olCollection=a.data}else{this.olCollection=new ol.Collection(a.data||[])}delete a.data;a.data=this.olCollection.getArray();this.callParent([a])},destroy:function(){delete this.olCollection;this.callParent(arguments)}});Ext.define("GeoExt.data.store.Features",{extend:"GeoExt.data.store.OlObjects",mixins:["GeoExt.mixin.SymbolCheck"],model:"GeoExt.data.model.Feature",config:{layer:null},map:null,createLayer:false,layerCreated:false,style:null,features:null,passThroughFilter:false,constructor:function(b){var d=this;d.onOlCollectionAdd=d.onOlCollectionAdd.bind(d);d.onOlCollectionRemove=d.onOlCollectionRemove.bind(d);var a=b||{};if(d.style===null){d.style=new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"#3399CC"}),stroke:new ol.style.Stroke({color:"#fff",width:2})})})}if(a.features!==undefined&&a.layer!==undefined){throw new Error("GeoExt.data.store.Features should only be configured with one or less of `features` and `layer`.")}var e="GeoExt.data.store.Features needs to be configured with a feature collection or with a layer with a source with a feature collection.";if(a.features===undefined&&a.layer===undefined){a.data=new ol.Collection()}else{if(a.features!==undefined){if(!(a.features instanceof ol.Collection)){throw new Error("Features are not a collection. "+e)}a.data=a.features}else{if(!(a.layer instanceof ol.layer.BaseVector)){throw new Error("Layer is no vector layer. "+e)}if(!a.layer.getSource()){throw new Error("Layer has no source. "+e)}var c=a.layer.getSource().getFeaturesCollection();if(!c){throw new Error("Source has no collection. "+e)}a.data=c}}d.callParent([a]);if(d.createLayer===true&&!d.layer){d.drawFeaturesOnMap()}this.olCollection.on("add",this.onOlCollectionAdd);this.olCollection.on("remove",this.onOlCollectionRemove);if(d.passThroughFilter===true){d.on("filterchange",d.onFilterChange)}},onOlCollectionAdd:function(b){var d=b.target;var c=b.element;var a=Ext.Array.indexOf(d.getArray(),c);if(!this.__updating){this.insert(a,c)}},onOlCollectionRemove:function(b){var c=b.element;var a=this.findBy(function(d){return d.olObject===c});if(a!==-1){if(!this.__updating){this.removeAt(a)}}},applyFields:function(a){var b=this;if(a){this.setModel(Ext.data.schema.Schema.lookupEntity(b.config.model))}},getFeatures:function(){return this.olCollection},getByFeature:function(a){return this.getAt(this.findBy(function(b){return b.getFeature()===a}))},destroy:function(){this.olCollection.un("add",this.onCollectionAdd);this.olCollection.un("remove",this.onCollectionRemove);var a=this;if(a.map&&a.layerCreated===true){a.map.removeLayer(a.layer)}a.callParent(arguments)},drawFeaturesOnMap:function(){var a=this;a.source=new ol.source.Vector({features:a.getFeatures()});a.layer=new ol.layer.Vector({source:a.source,style:a.style});if(a.map){a.map.addLayer(a.layer)}a.layerCreated=true},onFilterChange:function(){var a=this;if(a.layer&&a.layer.getSource() instanceof ol.source.Vector){if(!a.__updating){a.__updating=true;a.olCollection.clear();a.each(function(b){a.olCollection.push(b.getFeature())});delete a.__updating}}}});Ext.define("GeoExt.data.store.LayersTree",{extend:"Ext.data.TreeStore",alternateClassName:["GeoExt.data.TreeStore"],requires:["GeoExt.util.Layer"],mixins:["GeoExt.mixin.SymbolCheck"],model:"GeoExt.data.model.LayerTreeNode",config:{layerGroup:null,folderToggleMode:"classic"},statics:{KEY_COLLAPSE_REMOVE_OPT_OUT:"__remove_by_collapse__"},inverseLayerOrder:true,collectionEventsSuspended:false,proxy:{type:"memory",reader:{type:"json"}},root:{expanded:true},constructor:function(){var a=this;a.onLayerCollectionRemove=a.onLayerCollectionRemove.bind(a);a.onLayerCollectionAdd=a.onLayerCollectionAdd.bind(a);a.bindGroupLayerCollectionEvents=a.bindGroupLayerCollectionEvents.bind(a);a.unbindGroupLayerCollectionEvents=a.unbindGroupLayerCollectionEvents.bind(a);a.callParent(arguments);var b=a.layerGroup.getLayers();Ext.each(b.getArray(),function(c){a.addLayerNode(c)},a,a.inverseLayerOrder);a.bindGroupLayerCollectionEvents(a.layerGroup);a.on({remove:a.handleRemove,noderemove:a.handleNodeRemove,nodeappend:a.handleNodeAppend,nodeinsert:a.handleNodeInsert,scope:a})},applyFolderToggleMode:function(a){if(a==="classic"||a==="ol3"){var b=this.getRootNode();if(b){b.cascadeBy({before:function(c){c.set("__toggleMode",a)}})}return a}Ext.raise("Invalid folderToggleMode set in "+this.self.getName()+": "+a+"; 'classic' or 'ol3' are valid.")},handleRemove:function(b,a){var d=this;var c=d.self.KEY_COLLAPSE_REMOVE_OPT_OUT;d.suspendCollectionEvents();Ext.each(a,function(e){if(c in e&&e[c]===true){delete e[c];return}var g=e.getOlLayer();if(g instanceof ol.layer.Group){d.unbindGroupLayerCollectionEvents(g)}var f=GeoExt.util.Layer.findParentGroup(g,d.getLayerGroup());if(!f){f=d.getLayerGroup()}if(f){f.getLayers().remove(g)}});d.resumeCollectionEvents()},handleNodeRemove:function(a,b){var c=this;var e=b.getOlLayer();if(!e){e=c.getLayerGroup()}if(e instanceof ol.layer.Group){b.un("beforeexpand",c.onBeforeGroupNodeToggle);b.un("beforecollapse",c.onBeforeGroupNodeToggle);c.unbindGroupLayerCollectionEvents(e)}var d=GeoExt.util.Layer.findParentGroup(e,c.getLayerGroup());if(d){c.suspendCollectionEvents();d.getLayers().remove(e);c.resumeCollectionEvents()}},handleNodeAppend:function(a,f){var d=this;var e=a.getOlLayer();var c=f.getOlLayer();if(!e){e=d.getLayerGroup()}var b=GeoExt.util.Layer.getLayerIndex(c,e);if(b===-1){d.suspendCollectionEvents();if(d.inverseLayerOrder){e.getLayers().insertAt(0,c)}else{e.getLayers().push(c)}d.resumeCollectionEvents()}},handleNodeInsert:function(e,d,j){var i=this;var k=e.getOlLayer();if(!k){k=i.getLayerGroup()}var g=d.getOlLayer();var a=j.getOlLayer();var b=k.getLayers();var c=GeoExt.util.Layer.getLayerIndex(a,k);var h=c;if(i.inverseLayerOrder){h+=1}var f=GeoExt.util.Layer.getLayerIndex(g,k);if(f!==h&&!Ext.Array.contains(b.getArray(),g)){i.suspendCollectionEvents();b.insertAt(h,g);i.resumeCollectionEvents()}},addLayerNode:function(h){var e=this;var g=GeoExt.util.Layer.findParentGroup(h,e.getLayerGroup());var b=GeoExt.util.Layer.getLayerIndex(h,g);if(e.inverseLayerOrder){var c=g.getLayers().getLength();b=c-b-1}var a;if(g===e.getLayerGroup()){a=e.getRootNode()}else{a=e.getRootNode().findChildBy(function(i){return i.getOlLayer()===g},e,true)}if(!a){return}var d=a.insertChild(b,h);if(h instanceof ol.layer.Group){d.on("beforeexpand",e.onBeforeGroupNodeToggle,e);d.on("beforecollapse",e.onBeforeGroupNodeToggle,e);var f=h.getLayers().getArray();Ext.each(f,e.addLayerNode,e,e.inverseLayerOrder)}},onBeforeGroupNodeToggle:function(b){var a=this.self.KEY_COLLAPSE_REMOVE_OPT_OUT;b.cascadeBy(function(c){c[a]=true})},bindGroupLayerCollectionEvents:function(c){var a=this;if(c instanceof ol.layer.Group){var b=c.getLayers();b.on("remove",a.onLayerCollectionRemove);b.on("add",a.onLayerCollectionAdd);b.forEach(a.bindGroupLayerCollectionEvents)}},unbindGroupLayerCollectionEvents:function(c){var a=this;if(c instanceof ol.layer.Group){var b=c.getLayers();b.un("remove",a.onLayerCollectionRemove);b.un("add",a.onLayerCollectionAdd);b.forEach(a.unbindGroupLayerCollectionEvents)}},onLayerCollectionAdd:function(a){var b=this;if(b.collectionEventsSuspended){return}var c=a.element;b.addLayerNode(c);b.bindGroupLayerCollectionEvents(c)},onLayerCollectionRemove:function(a){var d=this;if(d.collectionEventsSuspended){return}var e=a.element;var c=d.getRootNode().findChildBy(function(f){return f.getOlLayer()===e},d,true);if(!c){return}if(e instanceof ol.layer.Group){d.unbindGroupLayerCollectionEvents(e)}var b=c.parentNode;b.removeChild(c)},suspendCollectionEvents:function(){this.collectionEventsSuspended=true},resumeCollectionEvents:function(){this.collectionEventsSuspended=false}});Ext.define("GeoExt.util.OGCFilter",{statics:{wfs100GetFeatureXmlTpl:'<wfs:GetFeature service="WFS" version="1.0.0" outputFormat="JSON" xmlns:wfs="http://www.opengis.net/wfs" xmlns="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/WFS-basic.xsd"><wfs:Query typeName="{0}">{1}</wfs:Query></wfs:GetFeature>',wfs110GetFeatureXmlTpl:'<wfs:GetFeature service="WFS" version="1.1.0" outputFormat="JSON" xmlns:wfs="http://www.opengis.net/wfs" xmlns="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/WFS-basic.xsd"><wfs:Query typeName="{0}">{1}</wfs:Query></wfs:GetFeature>',wfs200GetFeatureXmlTpl:'<wfs:GetFeature service="WFS" version="2.0.0" xmlns:wfs="http://www.opengis.net/wfs/2.0" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:sf="http://www.openplans.org/spearfish" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd http://www.opengis.net/gml/3.2 http://schemas.opengis.net/gml/3.2.1/gml.xsd"><wfs:Query typeName="{0}">{1}</wfs:Query></wfs:GetFeature>',spatialFilterWfs1xXmlTpl:"<{0}><PropertyName>{1}</PropertyName>{2}</{0}>",spatialFilterWfs2xXmlTpl:"<fes:{0}><fes:ValueReference>{1}</fes:ValueReference>{2}</fes:{0}>",spatialFilterBBoxTpl:'<BBOX>    <PropertyName>{0}</PropertyName>    <gml:Envelope        xmlns:gml="http://www.opengis.net/gml" srsName="{1}">        <gml:lowerCorner>{2} {3}</gml:lowerCorner>        <gml:upperCorner>{4} {5}</gml:upperCorner>    </gml:Envelope></BBOX>',gml32PolygonTpl:'<gml:Polygon gml:id="P1" srsName="urn:ogc:def:crs:{0}" srsDimension="2"><gml:exterior><gml:LinearRing><gml:posList>{1}</gml:posList></gml:LinearRing></gml:exterior></gml:Polygon>',gml32LineStringTpl:'<gml:LineString gml:id="L1" srsName="urn:ogc:def:crs:{0}" srsDimension="2"><gml:posList>{1}</gml:posList></gml:LineString>',gml32PointTpl:'<gml:Point gml:id="Pt1" srsName="urn:ogc:def:crs:{0}" srsDimension="2"><gml:pos>{1}</gml:pos></gml:Point>',filter20StartElementStr:'<fes:Filter xsi:schemaLocation="http://www.opengis.net/fes/2.0 http://schemas.opengis.net/filter/2.0/filterAll.xsd http://www.opengis.net/gml/3.2 http://schemas.opengis.net/gml/3.2.1/gml.xsd" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">',topologicalOrSpatialFilterOperators:["intersect","within","contains","equals","disjoint","crosses","touches","overlaps","bbox"],getOgcWmsFilterFromExtJsFilter:function(b,a){return GeoExt.util.OGCFilter.getOgcFilterFromExtJsFilter(b,"wms",a)},getOgcWfsFilterFromExtJsFilter:function(c,b,a){return GeoExt.util.OGCFilter.getOgcFilterFromExtJsFilter(c,"wfs",b,a)},getOgcFilterFromExtJsFilter:function(g,d,f,c){if(!Ext.isDefined(g)||!Ext.isArray(g)){Ext.Logger.error('Invalid filter argument given to GeoExt.util.OGCFilter. You need to pass an array of "Ext.util.Filter"');return}if(Ext.isEmpty(g)){return null}var e=false;if(!Ext.isEmpty(d)&&d.toLowerCase()==="wms"){e=true}var h=[];var b=GeoExt.util.OGCFilter;var a;Ext.each(g,function(i){a=b.getOgcFilterBodyFromExtJsFilterObject(i,c);if(a){h.push(a)}});return b.combineFilters(h,f,e,c)},getOgcFilterBodyFromExtJsFilterObject:function(d,c){if(!Ext.isDefined(d)){Ext.Logger.error('Invalid filter argument given to GeoExt.util.OGCFilter. You need to pass an instance of "Ext.util.Filter"');return}var f=d.getProperty();var b=d.getOperator();var e=d.getValue();var a;if(d.type==="spatial"){a=d.srsName}if(Ext.isEmpty(f)||Ext.isEmpty(b)||Ext.isEmpty(e)){Ext.Logger.warn("Skipping a filter as some values seem to be undefined");return}if(d.isDateValue){if(d.getDateFormat){e=Ext.Date.format(d.getValue(),d.getDateFormat())}else{e=Ext.Date.format(d.getValue(),"Y-m-d")}}return GeoExt.util.OGCFilter.getOgcFilter(f,b,e,c,a)},buildWfsGetFeatureWithFilter:function(f,e,c,a){var d=GeoExt.util.OGCFilter.getOgcWfsFilterFromExtJsFilter(f,e,c);var b=GeoExt.util.OGCFilter.wfs100GetFeatureXmlTpl;if(c&&c==="1.1.0"){b=GeoExt.util.OGCFilter.wfs110GetFeatureXmlTpl}else{if(c&&c==="2.0.0"){b=GeoExt.util.OGCFilter.wfs200GetFeatureXmlTpl}}return Ext.String.format(b,a,d)},getOgcFilter:function(e,g,o,k,q){if(Ext.isEmpty(e)||Ext.isEmpty(g)||Ext.isEmpty(o)){Ext.Logger.error("Invalid argument given to method `getOgcFilter`. You need to supply property, operator and value.");return}var b;var d;var m="PropertyName";var f=!Ext.isEmpty(k)&&k==="2.0.0";if(f){m="fes:ValueReference"}if(!(o instanceof ol.geom.Geometry)){o=o.toString().replace(/(^['])/g,"");o=o.toString().replace(/([']$)/g,"")}var r=(f?"fes:":"");switch(g){case"==":case"=":case"eq":b=r+"PropertyIsEqualTo";break;case"!==":case"!=":case"ne":b=r+"PropertyIsNotEqualTo";break;case"lt":case"<":b=r+"PropertyIsLessThan";break;case"lte":case"<=":b=r+"PropertyIsLessThanOrEqualTo";break;case"gt":case">":b=r+"PropertyIsGreaterThan";break;case"gte":case">=":b=r+"PropertyIsGreaterThanOrEqualTo";break;case"like":o="*"+o+"*";var n='<{0}PropertyIsLike wildCard="*" singleChar="." escape="!" matchCase="false"><'+m+">"+e+"</"+m+"><{0}Literal>"+o+"</{0}Literal></{0}PropertyIsLike>";return Ext.String.format(n,r);case"in":b=r+"Or";var a=o;if(!Ext.isArray(o)){o=o.replace(/([()'])/g,"");a=o.split(",")}var h="";Ext.each(a||o,function(x){h+="<"+r+"PropertyIsEqualTo><"+m+">"+e+"</"+m+"><"+r+"Literal>"+x+"</"+r+"Literal></"+r+"PropertyIsEqualTo>"});b="<"+b+">";var c;d=Ext.String.insert(b,"/",1);if(a.length>1){c=b+h+d}else{c=h}return c;case"intersect":case"within":case"contains":case"equals":case"disjoint":case"crosses":case"touches":case"overlaps":switch(g){case"equals":b="Equals";break;case"contains":b="Contains";break;case"within":b="Within";break;case"disjoint":b="Disjoint";break;case"touches":b="Touches";break;case"crosses":b="Crosses";break;case"overlaps":b="Overlaps";break;case"intersect":b="Intersects";break;default:Ext.Logger.warn("Method `getOgcFilter` could not handle the given topological operator: "+g);return}var p=GeoExt.util.OGCFilter.getGmlElementForGeometry(o,q,k);var i=k!=="2.0.0"?GeoExt.util.OGCFilter.spatialFilterWfs1xXmlTpl:GeoExt.util.OGCFilter.spatialFilterWfs2xXmlTpl;return Ext.String.format(i,b,e,p);case"bbox":var u;var s;var v;var t;o=o.getExtent();u=o[0];s=o[1];v=o[2];t=o[3];return Ext.String.format(GeoExt.util.OGCFilter.spatialFilterBBoxTpl,e,q,u,s,v,t);default:Ext.Logger.warn("Method `getOgcFilter` could not handle the given operator: "+g);return}b="<"+b+">";d=Ext.String.insert(b,"/",1);var l=f?"<fes:Literal>{2}</fes:Literal>":"<Literal>{2}</Literal>";var w="{0}<"+m+">{1}</"+m+">"+l+"{3}";var j=Ext.String.format(w,b,e,o,d);return j},getGmlElementForGeometry:function(f,o,d){if(d==="2.0.0"){var l=f.getType();var k=GeoExt.util.OGCFilter;var c=l.indexOf("Multi")>-1;switch(l){case"Polygon":case"MultiPolygon":var j=f.getCoordinates()[0];if(c){j=j[0]}return Ext.String.format(k.gml32PolygonTpl,o,k.flattenCoordinates(j));case"LineString":case"MultiLineString":var g=f.getCoordinates();if(c){g=g[0]}return Ext.String.format(k.gml32LineStringTpl,o,k.flattenCoordinates(g));case"Point":case"MultiPoint":var e=f.getCoordinates();if(c){e=e[0]}return Ext.String.format(k.gml32PointTpl,o,k.flattenCoordinates(e));default:return""}}else{var i=new ol.format.GML3({srsName:o});var b=i.writeGeometryNode(f,{dataProjection:o});if(!b){Ext.Logger.warn("Could not serialize geometry");return null}var n=b.children||b.childNodes;var h=new XMLSerializer();var a=n[0];var m=h.serializeToString(a);return m}},flattenCoordinates:function(a){return Ext.Array.map(a,function(b){return b.join(" ")}).join(" ")},combineFilterBodies:function(a,b,h){if(!Ext.isDefined(a)||!Ext.isArray(a)||a.length===0){Ext.Logger.error('Invalid "filterBodies" argument given to GeoExt.util.OGCFilter. You need to pass an array of OGC filter bodies as XML string');return}var e=b||"And";var g=!Ext.isEmpty(h)&&h==="2.0.0";var d=(g?"fes:":"");var c=d+e;var f=c="<"+c+">";var j=Ext.String.insert(f,"/",1);var i="";if(a.length>1){Ext.each(a,function(k){i+=k});i=f+i+j}else{i=a[0]}return i},combineFilters:function(c,d,j,h){var k=GeoExt.util.OGCFilter;var g="And";var f=d||g;var a=c.length;var e=[];var i=j?"":"ogc";var b=!h||h==="1.0.0";if(!Ext.isEmpty(h)&&h==="2.0.0"&&!j){e.push(k.filter20StartElementStr)}else{e.push("<Filter"+(j?"":' xmlns="http://www.opengis.net/'+i+'" xmlns:gml="http://www.opengis.net/gml"')+">");b=true}e.push();if(a>1){e.push("<"+(j||b?"":"fes:")+f+">")}Ext.each(c,function(l){e.push(l)});if(a>1){e.push("</"+(j||b?"":"fes:")+f+">")}e.push("</"+(j||b?"":"fes:")+"Filter>");return e.join("")},createSpatialFilter:function(c,b,d,a){if(!Ext.Array.contains(GeoExt.util.OGCFilter.topologicalOrSpatialFilterOperators,c)){return null}return new Ext.util.Filter({type:"spatial",srsName:a,operator:c,property:b,value:d})}}});Ext.define("GeoExt.data.store.WfsFeatures",{extend:"GeoExt.data.store.Features",mixins:["GeoExt.mixin.SymbolCheck","GeoExt.util.OGCFilter"],autoLoad:true,remoteSort:true,remoteFilter:true,logicalFilterCombinator:"And",requestMethod:"GET",service:"WFS",version:"2.0.0",request:"GetFeature",typeName:null,srsName:null,outputFormat:"application/json",startIndex:0,count:null,propertyName:null,startIndexOffset:0,format:null,layerAttribution:null,layerOptions:null,cacheFeatureCount:false,featureCountOutputFormat:"gml3",debounce:300,constructor:function(a){var d=this;a=a||{};a.pageSize=a.count||d.count;if(a.pageSize>0){var e=a.startIndex||d.startIndex;a.currentPage=Math.floor(e/a.pageSize)+1}var b=a.createLayer;a.createLayer=false;a.passThroughFilter=false;d.callParent([a]);d.loadWfsTask_=new Ext.util.DelayedTask();if(!d.url){Ext.raise("No URL given to WfsFeaturesStore")}if(b){d.source=new ol.source.Vector({features:new ol.Collection(),attributions:d.layerAttribution});var c={source:d.source,style:d.style};if(d.layerOptions){Ext.applyIf(c,d.layerOptions)}d.layer=new ol.layer.Vector(c);d.layerCreated=true}if(d.cacheFeatureCount===true){d.cacheTotalFeatureCount(!d.autoLoad)}else{if(d.autoLoad){d.loadWfs()}}d.on("beforeload",d.loadWfs,d);if(d.map&&d.layer){d.map.addLayer(d.layer)}},getTotalFeatureCount:function(f){var a=-1;var h=f.getResponseHeader("Content-Type");try{if(h.indexOf("application/json")!==-1){var g=Ext.decode(f.responseText);a=g.numberMatched}else{var b=f.responseXML;if(b&&b.firstChild){var c=b.firstChild.getAttribute("numberMatched");a=parseInt(c,10)}}}catch(d){Ext.Logger.warn("Error while detecting total feature count from WFS response")}return a},createSortByParameter:function(){var a=this;var c=[];var d;var b;a.getSorters().each(function(e){d=e.getDirection();b=e.getProperty();c.push(Ext.String.format("{0} {1}",b,d))});return c.join(",")},createOgcFilter:function(){var b=this;var a=[];b.getFilters().each(function(c){a.push(c)});if(a.length===0){return null}return GeoExt.util.OGCFilter.getOgcWfsFilterFromExtJsFilter(a,b.logicalFilterCombinator,b.version)},cacheTotalFeatureCount:function(c){var b=this;var a=b.url;b.cachedTotalCount=0;var d={service:b.service,version:b.version,request:b.request,typeName:b.typeName,outputFormat:b.featureCountOutputFormat,resultType:"hits"};Ext.Ajax.request({url:a,method:b.requestMethod,params:d,success:function(e){b.cachedTotalCount=b.getTotalFeatureCount(e);if(!c){b.loadWfs()}},failure:function(e){Ext.Logger.warn("Error while requesting features from WFS: "+e.responseText+" Status: "+e.status)}})},onFilterChange:function(){var a=this;if(a.getFilters()&&a.getFilters().length>0){a.loadWfs()}},createParameters:function(){var b=this;var c={service:b.service,version:b.version,request:b.request,typeName:b.typeName,outputFormat:b.outputFormat};if(b.propertyName!==null){c.propertyName=b.propertyName}if(b.srsName){c.srsName=b.srsName}else{if(b.map){c.srsName=b.map.getView().getProjection().getCode()}}if(b.remoteSort===true){var d=b.createSortByParameter();if(d){c.sortBy=d}}if(b.remoteFilter===true){var a=b.createOgcFilter();if(a){c.filter=a}}if(b.pageSize){b.startIndex=((b.currentPage-1)*b.pageSize)+b.startIndexOffset;c.startIndex=b.startIndex;c.count=b.pageSize}return c},loadWfs:function(){var a=this;if(a.loadWfsTask_.id===null){a.loadWfsTask_.delay(a.debounce,function(){});a.loadWfsInternal()}else{a.loadWfsTask_.delay(a.debounce,function(){a.loadWfsInternal()})}},loadWfsInternal:function(){var b=this;var a=b.url;var c=b.createParameters();if(b.fireEvent("gx-wfsstoreload-beforeload",b,c)===false){return}Ext.Ajax.request({url:a,method:b.requestMethod,params:c,success:function(f){if(!b.format){Ext.Logger.warn("No format given for WfsFeatureStore. Skip parsing feature data.");return}if(b.cacheFeatureCount===true){b.totalCount=b.cachedTotalCount}else{b.totalCount=b.getTotalFeatureCount(f)}var e=[];try{e=b.format.readFeatures(f.responseText)}catch(d){Ext.Logger.warn("Error parsing features into the OpenLayers format. Check the server response.")}b.setData(e);if(b.layer){b.source.clear();b.source.addFeatures(e)}b.fireEvent("gx-wfsstoreload",b,e,true)},failure:function(d){if(d.aborted!==true){Ext.Logger.warn("Error while requesting features from WFS: "+d.responseText+" Status: "+d.status)}b.fireEvent("gx-wfsstoreload",b,null,false)}})},doDestroy:function(){var a=this;if(a.loadWfsTask_.id!==null){a.loadWfsTask_.cancel()}a.callParent(arguments)}});Ext.define("GeoExt.plugin.layertreenode.ContextMenu",{extend:"Ext.plugin.Abstract",alias:"plugin.gx_layertreenode_contextmenu",contextUi:null,recreateContextUi:true,init:function(a){var b=this;if(!(a instanceof Ext.tree.Column)){Ext.log.warn("Plugin shall only be applied to instances of Ext.tree.Column");return}a.on("contextmenu",b.onContextMenu,b)},onContextMenu:function(c,g,e,f,a,b){var d=this;a.preventDefault();if(d.contextUi&&d.recreateContextUi){d.contextUi.destroy();d.contextUi=null}if(!d.contextUi){d.contextUi=d.createContextUi(b)}d.showContextUi(a.getXY())},createContextUi:function(a){Ext.Logger.warn("gx_layertreenode_contextmenu: createContextUi is not overwritten. It is very likely that the plugin won't work");return null},showContextUi:function(a){var b=this;if(b.contextUi&&a){b.contextUi.showAt(a)}}});Ext.define("GeoExt.form.field.GeocoderComboBox",{extend:"Ext.form.field.ComboBox",alias:["widget.gx_geocoder_combo","widget.gx_geocoder_combobox","widget.gx_geocoder_field"],requires:["Ext.data.JsonStore"],mixins:["GeoExt.mixin.SymbolCheck"],map:null,locationLayer:null,locationLayerStyle:null,store:null,proxyRootProperty:null,displayField:"name",displayValueMapping:"display_name",valueField:"extent",queryParam:"q",emptyText:"Search for a location",minChars:3,queryDelay:100,url:"https://nominatim.openstreetmap.org/search?format=json",srs:"EPSG:4326",zoom:10,showLocationOnMap:true,restrictToMapExtent:false,initComponent:function(){var a=this;a.updateExtraParams=a.updateExtraParams.bind(a);if(!a.store){a.store=Ext.create("Ext.data.JsonStore",{fields:[{name:"name",mapping:a.displayValueMapping},{name:"extent",convert:a.convertToExtent},{name:"coordinate",convert:a.convertToCoordinate}],proxy:{type:"ajax",url:a.url,reader:{type:"json",rootProperty:a.proxyRootProperty}}})}if(!a.locationLayer){a.locationLayer=new ol.layer.Vector({source:new ol.source.Vector(),style:a.locationLayerStyle!==null?a.locationLayerStyle:undefined});if(a.map){a.map.addLayer(a.locationLayer)}}a.callParent(arguments);a.on({unRestrictMapExtent:a.unRestrictExtent,restrictToMapExtent:a.restrictExtent,select:a.onSelect,focus:a.onFocus,scope:a});if(a.restrictToMapExtent){a.restrictExtent()}},restrictExtent:function(){var a=this;a.map.on("moveend",a.updateExtraParams);a.updateExtraParams()},updateExtraParams:function(){var d=this;var c=d.map.getSize();var a=d.map.getView();var b=a.calculateExtent(c);d.addMapExtentParams(b,a.getProjection())},addMapExtentParams:function(b,a){var c=this;if(!a){a=c.map.getView().getProjection()}var e=ol.proj.transform([b[0],b[1]],a,"EPSG:4326");var f=ol.proj.transform([b[2],b[3]],a,"EPSG:4326");e=Ext.Array.map(e,function(g){return Math.min(Math.max(g,-180),180)});f=Ext.Array.map(f,function(g){return Math.min(Math.max(g,-180),180)});var d=[e.join(","),f.join(",")].join(",");if(c.store&&c.store.getProxy()){c.store.getProxy().setExtraParam("viewbox",d);c.store.getProxy().setExtraParam("bounded","1")}},unRestrictExtent:function(){var a=this;a.map.un("moveend",a.updateExtraParams);a.removeMapExtentParams()},removeMapExtentParams:function(){var a=this;if(a.store&&a.store.getProxy()){a.store.getProxy().setExtraParam("viewbox",undefined);a.store.getProxy().setExtraParam("bounded",undefined)}},convertToExtent:function(c,g){var d=g.get("boundingbox");var b=parseFloat(d[2],10);var a=parseFloat(d[0],10);var f=parseFloat(d[3],10);var e=parseFloat(d[1],10);return[b,a,f,e]},convertToCoordinate:function(a,b){return[parseFloat(b.get("lon"),10),parseFloat(b.get("lat"),10)]},drawLocationFeatureOnMap:function(d){var c=this;var a;if(d.length===2){a=new ol.geom.Point(d)}else{if(d.length===4){a=ol.geom.Polygon.fromExtent(d)}}if(a){var b=new ol.Feature({geometry:a});c.locationLayer.getSource().clear();c.locationLayer.getSource().addFeature(b)}},removeLocationFeature:function(){this.locationLayer.getSource().clear()},onFocus:function(){var a=this;a.clearValue();a.removeLocationFeature()},onSelect:function(g,a){var d=this;if(!d.map){Ext.Logger.warn("No map configured in GeoExt.form.field.GeocoderComboBox. Skip zoom to selection.");return}var f=a.get(d.valueField);var b;var c=d.map.getView();var e=c.getProjection().getCode();if(f.length===2){b=ol.proj.transform(f,d.srs,e);c.setCenter(b);c.setZoom(d.zoom)}else{if(f.length===4){b=ol.proj.transformExtent(f,d.srs,e);c.fit(b)}}if(d.showLocationOnMap){d.drawLocationFeatureOnMap(b)}}});Ext.define("GeoExt.selection.FeatureModelMixin",{extend:"Ext.Mixin",mixinConfig:{after:{bindComponent:"bindFeatureModel"},before:{destroy:"unbindOlEvents",constructor:"onConstruct",onSelectChange:"beforeSelectChange"}},config:{layer:null,map:null,mapSelection:false,selectionTolerance:12,selectStyle:new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"rgba(255,255,255,0.8)"}),stroke:new ol.style.Stroke({color:"darkblue",width:2})}),fill:new ol.style.Fill({color:"rgba(255,255,255,0.8)"}),stroke:new ol.style.Stroke({color:"darkblue",width:2})})},existingFeatStyles:{},mapClickRegistered:false,selectedFeatureAttr:"gx_selected",selectedFeatures:null,onConstruct:function(){var a=this;a.onSelectFeatAdd=a.onSelectFeatAdd.bind(a);a.onSelectFeatRemove=a.onSelectFeatRemove.bind(a);a.onFeatureClick=a.onFeatureClick.bind(a)},bindFeatureModel:function(){var b=this;if(!b.layer||!(b.layer instanceof ol.layer.Vector)){var a=b.getStore();if(a&&a.getLayer&&a.getLayer()&&a.getLayer() instanceof ol.layer.Vector){b.layer=a.getLayer()}}b.bindOlEvents()},bindOlEvents:function(){if(!this.bound_){var a=this;a.selectedFeatures=new ol.Collection();a.selectedFeatures.on("add",a.onSelectFeatAdd);a.selectedFeatures.on("remove",a.onSelectFeatRemove);if(a.mapSelection&&a.layer&&a.map){a.map.on("singleclick",a.onFeatureClick);a.mapClickRegistered=true}this.bound_=true}},unbindOlEvents:function(){var a=this;if(a.selectedFeatures){a.selectedFeatures.un("add",a.onSelectFeatAdd);a.selectedFeatures.un("remove",a.onSelectFeatRemove)}if(a.mapClickRegistered){a.map.un("singleclick",a.onFeatureClick);a.mapClickRegistered=false}},onSelectFeatAdd:function(a){var c=this;var b=a.element;if(b){if(b.getStyle()){var d=b.getId()||c.getRandomFid();c.existingFeatStyles[d]=b.getStyle();b.setId(d)}b.setStyle(c.selectStyle)}},onSelectFeatRemove:function(a){var c=this;var b=a.element;if(b){var d=b.getId();if(d&&c.existingFeatStyles[d]){b.setStyle(c.existingFeatStyles[d]);delete c.existingFeatStyles[d]}else{b.setStyle()}}},onFeatureClick:function(a){var c=this;var b=c.map.forEachFeatureAtPixel(a.pixel,function(d){return d},{layerFilter:function(d){return d===c.layer},hitTolerance:c.selectionTolerance});if(b){c.selectMapFeature(b)}},selectMapFeature:function(a){var b=this;var c=b.store.findBy(function(d,e){return d.getFeature()===a});if(b.getSelectionMode()==="SINGLE"){b.deselectAll()}if(a.get(b.selectedFeatureAttr)){b.deselect(c)}else{if(c!==-1&&!b.isSelected(c)){b.select(c,!this.singleSelect);b.view.focusRow(c)}}},beforeSelectChange:function(a,c){var d=this;var e=a.getFeature();var b=true;e.set(d.selectedFeatureAttr,c,b);if(c){d.selectedFeatures.push(e)}else{d.selectedFeatures.remove(e)}},getRandomFid:function(){return new Date().getTime()+""+Math.floor(Math.random()*11)}});Ext.define("GeoExt.selection.FeatureCheckboxModel",{extend:"Ext.selection.CheckboxModel",alias:["selection.featurecheckboxmodel"],mixins:["GeoExt.selection.FeatureModelMixin"]});Ext.define("GeoExt.selection.FeatureRowModel",{alternateClassName:"GeoExt.selection.FeatureModel",extend:"Ext.selection.RowModel",alias:["selection.featuremodel","selection.featurerowmodel"],mixins:["GeoExt.selection.FeatureModelMixin"]});Ext.define("GeoExt.state.PermalinkProvider",{extend:"Ext.state.Provider",requires:[],alias:"state.gx_permalinkprovider",mapState:null,constructor:function(){var a=this;a.callParent(arguments);if(window.location.hash!==""){a.mapState=a.readPermalinkHash(window.location.hash)}},readPermalinkHash:function(a){var b;var d=a.replace("#map=","");var c=d.split("/");if(c.length===4){b={zoom:parseInt(c[0],10),center:[parseFloat(c[1]),parseFloat(c[2])],rotation:parseFloat(c[3])}}return b},getPermalinkHash:function(b){var c=this;var a=c.mapState;var f=a.center[0];var d=a.center[1];if(b){f=Math.round(f*100)/100;d=Math.round(d*100)/100}var e="#map="+a.zoom+"/"+f+"/"+d+"/"+a.rotation;return e},set:function(a,c){var b=this;b.mapState=c;b.callParent(arguments)}});Ext.define("GeoExt.toolbar.WfsPaging",{extend:"Ext.toolbar.Paging",xtype:"gx_wfspaging_toolbar",onBindStore:function(){var a=this;a.callParent(arguments);a.store.on("gx-wfsstoreload",a.onLoad,a)}});