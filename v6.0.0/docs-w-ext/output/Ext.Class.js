Ext.data.JsonP.Ext_Class({"tagname":"class","name":"Ext.Class","autodetected":{},"files":[{"filename":"Class.js","href":"Class.html#Ext-Class"}],"members":[{"name":"alias","tagname":"cfg","owner":"Ext.Class","id":"cfg-alias","meta":{}},{"name":"alternateClassName","tagname":"cfg","owner":"Ext.Class","id":"cfg-alternateClassName","meta":{}},{"name":"cachedConfig","tagname":"cfg","owner":"Ext.Class","id":"cfg-cachedConfig","meta":{}},{"name":"config","tagname":"cfg","owner":"Ext.Class","id":"cfg-config","meta":{}},{"name":"extend","tagname":"cfg","owner":"Ext.Class","id":"cfg-extend","meta":{}},{"name":"inheritableStatics","tagname":"cfg","owner":"Ext.Class","id":"cfg-inheritableStatics","meta":{}},{"name":"mixins","tagname":"cfg","owner":"Ext.Class","id":"cfg-mixins","meta":{}},{"name":"override","tagname":"cfg","owner":"Ext.Class","id":"cfg-override","meta":{}},{"name":"platformConfig","tagname":"cfg","owner":"Ext.Class","id":"cfg-platformConfig","meta":{}},{"name":"privates","tagname":"cfg","owner":"Ext.Class","id":"cfg-privates","meta":{}},{"name":"requires","tagname":"cfg","owner":"Ext.Class","id":"cfg-requires","meta":{}},{"name":"singleton","tagname":"cfg","owner":"Ext.Class","id":"cfg-singleton","meta":{}},{"name":"statics","tagname":"cfg","owner":"Ext.Class","id":"cfg-statics","meta":{}},{"name":"uses","tagname":"cfg","owner":"Ext.Class","id":"cfg-uses","meta":{}},{"name":"xtype","tagname":"cfg","owner":"Ext.Class","id":"cfg-xtype","meta":{}},{"name":"defaultPreprocessors","tagname":"property","owner":"Ext.Class","id":"property-defaultPreprocessors","meta":{"private":true}},{"name":"preprocessors","tagname":"property","owner":"Ext.Class","id":"property-preprocessors","meta":{"private":true}},{"name":"constructor","tagname":"method","owner":"Ext.Class","id":"method-constructor","meta":{}},{"name":"create","tagname":"method","owner":"Ext.Class","id":"method-create","meta":{"private":true}},{"name":"getPreprocessors","tagname":"method","owner":"Ext.Class","id":"method-getPreprocessors","meta":{"private":true}},{"name":"onBeforeCreated","tagname":"method","owner":"Ext.Class","id":"method-onBeforeCreated","meta":{"private":true}},{"name":"process","tagname":"method","owner":"Ext.Class","id":"method-process","meta":{"private":true}},{"name":"getDefaultPreprocessors","tagname":"method","owner":"Ext.Class","id":"static-method-getDefaultPreprocessors","meta":{"private":true,"static":true}},{"name":"getPreprocessor","tagname":"method","owner":"Ext.Class","id":"static-method-getPreprocessor","meta":{"private":true,"static":true}},{"name":"registerPreprocessor","tagname":"method","owner":"Ext.Class","id":"static-method-registerPreprocessor","meta":{"chainable":true,"private":true,"static":true}},{"name":"setDefaultPreprocessorPosition","tagname":"method","owner":"Ext.Class","id":"static-method-setDefaultPreprocessorPosition","meta":{"chainable":true,"private":true,"static":true}},{"name":"setDefaultPreprocessors","tagname":"method","owner":"Ext.Class","id":"static-method-setDefaultPreprocessors","meta":{"chainable":true,"private":true,"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.Class","short_doc":"This is a low level factory that is used by Ext.define and should not be used\ndirectly in application code. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Class.html#Ext-Class' target='_blank'>Class.js</a></div></pre><div class='doc-contents'><p>This is a low level factory that is used by <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> and should not be used\ndirectly in application code.</p>\n\n<p>The configs of this class are intended to be used in <code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a></code> calls to describe the class you\nare declaring. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.util.Thing', {\n    extend: 'App.util.Other',\n\n    alias: 'util.thing',\n\n    config: {\n        foo: 42\n    }\n});\n</code></pre>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> is the factory and <strong>not</strong> the superclass of everything. For the base class that <strong>all</strong>\nclasses inherit from, see <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-alias' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/ClassManager.html#Ext-Class-cfg-alias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-alias' class='name expandable'>alias</a> : String/String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of short aliases for class names. ...</div><div class='long'><p>List of short aliases for class names. An alias consists of a namespace and a name\nconcatenated by a period as &#60;namespace&#62;.&#60;name&#62;</p>\n\n<ul>\n<li><strong>namespace</strong> - The namespace describes what kind of alias this is and must be\nall lowercase.</li>\n<li><strong>name</strong> - The name of the alias which allows the lazy-instantiation via the\nalias. The name shouldn't contain any periods.</li>\n</ul>\n\n\n<p>A list of namespaces and the usages are:</p>\n\n<ul>\n<li><strong>feature</strong> - <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> features</li>\n<li><strong>plugin</strong> - Plugins</li>\n<li><strong>store</strong> - <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a></li>\n<li><strong>widget</strong> - Components</li>\n</ul>\n\n\n<p>Most useful for defining xtypes for widgets:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.CoolPanel', {\n    extend: '<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>',\n    alias: ['widget.coolpanel'],\n    title: 'Yeah!'\n});\n\n// Using <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('widget.coolpanel');\n\n// Using the shorthand for defining widgets by xtype\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('panel', {\n    items: [\n        {xtype: 'coolpanel', html: 'Foo'},\n        {xtype: 'coolpanel', html: 'Bar'}\n    ]\n});\n</code></pre>\n</div></div></div><div id='cfg-alternateClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/ClassManager.html#Ext-Class-cfg-alternateClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-alternateClassName' class='name expandable'>alternateClassName</a> : String/String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines alternate names for this class. ...</div><div class='long'><p>Defines alternate names for this class.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    alternateClassName: ['Coder', 'Hacker'],\n    code: function(msg) {\n        alert('Typing... ' + msg);\n    }\n});\n\nvar joe = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Developer');\njoe.code('stackoverflow');\n\nvar rms = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Hacker');\nrms.code('hack hack');\n</code></pre>\n</div></div></div><div id='cfg-cachedConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-cachedConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-cachedConfig' class='name expandable'>cachedConfig</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>This configuration works in a very similar manner to the config option. ...</div><div class='long'><p>This configuration works in a very similar manner to the <a href=\"#!/api/Ext.Class-cfg-config\" rel=\"Ext.Class-cfg-config\" class=\"docClass\">config</a> option.\nThe difference is that the configurations are only ever processed when the first instance\nof that class is created. The processed value is then stored on the class prototype and\nwill not be processed on subsequent instances of the class. Getters/setters will be generated\nin exactly the same way as <a href=\"#!/api/Ext.Class-cfg-config\" rel=\"Ext.Class-cfg-config\" class=\"docClass\">config</a>.</p>\n\n<p>This option is useful for expensive objects that can be shared across class instances.\nThe class itself ensures that the creation only occurs once.</p>\n</div></div></div><div id='cfg-config' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-config' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-config' class='name expandable'>config</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>List of configuration options with their default values. ...</div><div class='long'><p>List of configuration options with their default values.</p>\n\n<p><strong>Note:</strong> You need to make sure <a href=\"#!/api/Ext.Base-method-initConfig\" rel=\"Ext.Base-method-initConfig\" class=\"docClass\">Ext.Base.initConfig</a> is called from your constructor if you are defining\nyour own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter\nmethods will not be initialized.</p>\n\n<p>Each config item will have its own setter and getter method automatically generated inside the class prototype\nduring class creation time, if the class does not have those methods explicitly defined.</p>\n\n<p>As an example, let's convert the name property of a Person class to be a config item, then add extra age and\ngender items.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        name: 'Mr. Unknown',\n        age: 0,\n        gender: 'Male'\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        return this;\n    }\n\n    // ...\n});\n</code></pre>\n\n<p>Within the class, this.name still has the default value of \"Mr. Unknown\". However, it's now publicly accessible\nwithout sacrificing encapsulation, via setter and getter methods.</p>\n\n<pre><code>var jacky = new Person({\n    name: \"Jacky\",\n    age: 35\n});\n\nalert(jacky.getAge());      // alerts 35\nalert(jacky.getGender());   // alerts \"Male\"\n\njacky.walk(10);             // alerts \"Jacky is walking 10 steps\"\n\njacky.setName(\"Mr. Nguyen\");\nalert(jacky.getName());     // alerts \"Mr. Nguyen\"\n\njacky.walk(10);             // alerts \"Mr. Nguyen is walking 10 steps\"\n</code></pre>\n\n<p>Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.\nTwo key things happened:</p>\n\n<ul>\n<li>The provided config object when the class is instantiated is recursively merged with the default config object.</li>\n<li>All corresponding setter methods are called with the merged values.</li>\n</ul>\n\n\n<p>Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:</p>\n\n<ul>\n<li>Filtering / validation / transformation of the given value before it's actually stored within the instance.</li>\n<li>Notification (such as firing events) / post-processing after the value has been set, or changed from a\nprevious value.</li>\n</ul>\n\n\n<p>By standardize this common pattern, the default generated setters provide two extra template methods that you\ncan put your own custom logics into, i.e: an \"applyFoo\" and \"updateFoo\" method for a \"foo\" config item, which are\nexecuted before and after the value is actually set, respectively. Back to the example class, let's validate that\nage must be a valid positive number, and fire an 'agechange' if the value is modified.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        // ...\n    },\n\n    constructor: {\n        // ...\n    },\n\n    applyAge: function(age) {\n        if (typeof age !== 'number' || age &lt; 0) {\n            console.warn(\"Invalid age, must be a positive number\");\n            return;\n        }\n\n        return age;\n    },\n\n    updateAge: function(newAge, oldAge) {\n        // age has changed from \"oldAge\" to \"newAge\"\n        this.fireEvent('agechange', this, newAge, oldAge);\n    }\n\n    // ...\n});\n\nvar jacky = new Person({\n    name: \"Jacky\",\n    age: 'invalid'\n});\n\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(-100));  // alerts 0\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(35));    // alerts 0\nalert(jacky.getAge());      // alerts 35\n</code></pre>\n\n<p>In other words, when leveraging the config feature, you mostly never need to define setter and getter methods\nexplicitly. Instead, \"apply<em>\" and \"update</em>\" methods should be implemented where necessary. Your code will be\nconsistent throughout and only contain the minimal logic that you actually care about.</p>\n\n<p>When it comes to inheritance, the default config of the parent class is automatically, recursively merged with\nthe child's default config. The same applies for mixins.</p>\n</div></div></div><div id='cfg-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-extend' class='name expandable'>extend</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The parent class that this class extends. ...</div><div class='long'><p>The parent class that this class extends. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    say: function(text) { alert(text); }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    extend: 'Person',\n    say: function(text) { this.callParent([\"print \"+text]); }\n});\n</code></pre>\n</div></div></div><div id='cfg-inheritableStatics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-inheritableStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-inheritableStatics' class='name expandable'>inheritableStatics</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>List of inheritable static methods for this class. ...</div><div class='long'><p>List of inheritable static methods for this class.\nOtherwise just like <a href=\"#!/api/Ext.Class-cfg-statics\" rel=\"Ext.Class-cfg-statics\" class=\"docClass\">statics</a> but subclasses inherit these methods.</p>\n</div></div></div><div id='cfg-mixins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-mixins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-mixins' class='name expandable'>mixins</a> : String[]/Object<span class=\"signature\"></span></div><div class='description'><div class='short'>List of classes to mix into this class. ...</div><div class='long'><p>List of classes to mix into this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"For he's a jolly good fellow...\")\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: ['CanSing']\n})\n</code></pre>\n\n<p>In this case the Musician class will get a <code>sing</code> method from CanSing mixin.</p>\n\n<p>But what if the Musician already has a <code>sing</code> method? Or you want to mix\nin two classes, both of which define <code>sing</code>?  In such a cases it's good\nto define mixins as an object, where you assign a name to each mixin:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: {\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         // delegate singing operation to mixin\n         this.mixins.canSing.sing.call(this);\n     }\n})\n</code></pre>\n\n<p>In this case the <code>sing</code> method of Musician will overwrite the\nmixed in <code>sing</code> method. But you can access the original mixed in method\nthrough special <code>mixins</code> property.</p>\n</div></div></div><div id='cfg-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/ClassManager.html#Ext-Class-cfg-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-override' class='name expandable'>override</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Overrides members of the specified target class. ...</div><div class='long'><p>Overrides members of the specified <code>target</code> class.</p>\n\n<p><strong>NOTE:</strong> the overridden class must have been defined using\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> in order to use the <code>override</code> config.</p>\n\n<p>Methods defined on the overriding class will not automatically call the methods of\nthe same name in the ancestor class chain.  To call the parent's method of the\nsame name you must call <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a>.  To skip the\nmethod of the overridden class and call its parent you will instead call\n<a href=\"#!/api/Ext.Base-method-callSuper\" rel=\"Ext.Base-method-callSuper\" class=\"docClass\">callSuper</a>.</p>\n\n<p>See <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> for additional usage examples.</p>\n</div></div></div><div id='cfg-platformConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-platformConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-platformConfig' class='name expandable'>platformConfig</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Allows setting config values for a class based on specific platforms. ...</div><div class='long'><p>Allows setting config values for a class based on specific platforms. The value\nof this config is an object whose properties are \"rules\" and whose values are\nobjects containing config values.</p>\n\n<p>For example:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.view.Foo', {\n     extend: '<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>',\n\n     platformConfig: {\n         desktop: {\n             title: 'Some Rather Descriptive Title'\n         },\n\n         '!desktop': {\n             title: 'Short Title'\n         }\n     }\n });\n</code></pre>\n\n<p>In the above, \"desktop\" and \"!desktop\" are (mutually exclusive) rules. Whichever\nevaluates to <code>true</code> will have its configs applied to the class. In this case, only\nthe \"title\" property, but the object can contain any number of config properties.\nIn this case, the <code>platformConfig</code> is evaluated as part of the class and there is\nno cost for each instance created.</p>\n\n<p>The rules are evaluated expressions in the context of the platform tags contained\nin <code><a href=\"#!/api/Ext-property-platformTags\" rel=\"Ext-property-platformTags\" class=\"docClass\">Ext.platformTags</a></code>. Any properties of that object are\nimplicitly usable (as shown above).</p>\n\n<p>If a <code>platformConfig</code> specifies a config value, it will replace any values declared\non the class itself.</p>\n\n<p>Use of <code>platformConfig</code> on instances is handled by the config system when classes\ncall <code><a href=\"#!/api/Ext.Base-method-initConfig\" rel=\"Ext.Base-method-initConfig\" class=\"docClass\">initConfig</a></code>. For example:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>({\n     xtype: 'panel',\n\n     platformConfig: {\n         desktop: {\n             title: 'Some Rather Descriptive Title'\n         },\n\n         '!desktop': {\n             title: 'Short Title'\n         }\n     }\n });\n</code></pre>\n\n<p>The following is equivalent to the above:</p>\n\n<pre><code> if (Ext.platformTags.desktop) {\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>({\n         xtype: 'panel',\n         title: 'Some Rather Descriptive Title'\n     });\n } else {\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>({\n         xtype: 'panel',\n         title: 'Short Title'\n     });\n }\n</code></pre>\n\n<p>To adjust configs based on dynamic conditions, see <code><a href=\"#!/api/Ext.mixin.Responsive\" rel=\"Ext.mixin.Responsive\" class=\"docClass\">Ext.mixin.Responsive</a></code>.</p>\n</div></div></div><div id='cfg-privates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-privates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-privates' class='name expandable'>privates</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>The privates config is a list of methods intended to be used internally by the\nframework. ...</div><div class='long'><p>The <code>privates</code> config is a list of methods intended to be used internally by the\nframework.  Methods are placed in a <code>privates</code> block to prevent developers from\naccidentally overriding framework methods in custom classes.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n    privates: {\n        runFactory: function(brand) {\n            // internal only processing of brand passed to factory\n            this.factory(brand);\n        }\n    },\n\n    factory: function (brand) {}\n});\n</code></pre>\n\n<p>In order to override a method from a <code>privates</code> block, the overridden method must\nalso be placed in a <code>privates</code> block within the override class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Override.Computer', {\n    override: 'Computer',\n    privates: {\n        runFactory: function() {\n            // overriding logic\n        }\n    }\n});\n</code></pre>\n</div></div></div><div id='cfg-requires' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Loader.html#Ext-Class-cfg-requires' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-requires' class='name expandable'>requires</a> : String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of classes that have to be loaded before instantiating this class. ...</div><div class='long'><p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    requires: ['Child'],\n    giveBirth: function() {\n        // we can be sure that child class is available.\n        return new Child();\n    }\n});\n</code></pre>\n</div></div></div><div id='cfg-singleton' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/ClassManager.html#Ext-Class-cfg-singleton' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-singleton' class='name expandable'>singleton</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>When set to true, the class will be instantiated as singleton. ...</div><div class='long'><p>When set to true, the class will be instantiated as singleton.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Logger', {\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n</code></pre>\n</div></div></div><div id='cfg-statics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-cfg-statics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-statics' class='name expandable'>statics</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>List of static methods for this class. ...</div><div class='long'><p>List of static methods for this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n             // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n</div></div></div><div id='cfg-uses' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Loader.html#Ext-Class-cfg-uses' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-uses' class='name expandable'>uses</a> : String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of optional classes to load together with this class. ...</div><div class='long'><p>List of optional classes to load together with this class. These aren't neccessarily loaded before\nthis class is created, but are guaranteed to be available before <a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a> listeners are\ninvoked. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    uses: ['Child'],\n    giveBirth: function() {\n        // This code might, or might not work:\n        // return new Child();\n\n        // Instead use <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>() to load the class at the spot if not loaded already:\n        return <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Child');\n    }\n});\n</code></pre>\n</div></div></div><div id='cfg-xtype' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/ClassManager.html#Ext-Class-cfg-xtype' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-cfg-xtype' class='name expandable'>xtype</a> : <a href=\"#!/api/Ext.enums.Widget\" rel=\"Ext.enums.Widget\" class=\"docClass\">Ext.enums.Widget</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Note: Only applies to Ext.Component derived classes when used as\na config in Ext.define. ...</div><div class='long'><p><strong>Note:</strong> Only applies to <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> derived classes when used as\na config in <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>.</p>\n\n<p>This property provides a shorter alternative to creating objects than using a full\nclass name. Using <code>xtype</code> is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:</p>\n\n<pre><code> items: [\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n         fieldLabel: 'Foo'\n     }),\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n         fieldLabel: 'Bar'\n     }),\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Number\" rel=\"Ext.form.field.Number\" class=\"docClass\">Ext.form.field.Number</a>', {\n         fieldLabel: 'Num'\n     })\n ]\n</code></pre>\n\n<p>But by using <code>xtype</code>, the above becomes:</p>\n\n<pre><code> items: [\n     {\n         xtype: 'textfield',\n         fieldLabel: 'Foo'\n     },\n     {\n         xtype: 'textfield',\n         fieldLabel: 'Bar'\n     },\n     {\n         xtype: 'numberfield',\n         fieldLabel: 'Num'\n     }\n ]\n</code></pre>\n\n<p>When the <code>xtype</code> is common to many items, <a href=\"#!/api/Ext.container.Container-cfg-defaultType\" rel=\"Ext.container.Container-cfg-defaultType\" class=\"docClass\">Ext.container.Container.defaultType</a>\nis another way to specify the <code>xtype</code> for all items that don't have an explicit <code>xtype</code>:</p>\n\n<pre><code> defaultType: 'textfield',\n items: [\n     { fieldLabel: 'Foo' },\n     { fieldLabel: 'Bar' },\n     { fieldLabel: 'Num', xtype: 'numberfield' }\n ]\n</code></pre>\n\n<p>Each member of the <code>items</code> array is now just a \"configuration object\". These objects\nare used to create and configure component instances. A configuration object can be\nmanually used to instantiate a component using <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>:</p>\n\n<pre><code> var text1 = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n     fieldLabel: 'Foo'\n });\n\n // or alternatively:\n\n var text1 = <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>({\n     xtype: 'textfield',\n     fieldLabel: 'Foo'\n });\n</code></pre>\n\n<p>This conversion of configuration objects into instantiated components is done when\na container is created as part of its {Ext.container.AbstractContainer#initComponent}\nprocess. As part of the same process, the <code>items</code> array is converted from its raw\narray form into a <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a> instance.</p>\n\n<p>You can define your own <code>xtype</code> on a custom <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">component</a> by specifying\nthe <code>xtype</code> property in <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.PressMeButton', {\n    extend: '<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>',\n    xtype: 'pressmebutton',\n    text: 'Press Me'\n});\n</code></pre>\n\n<p>Care should be taken when naming an <code>xtype</code> in a custom component because there is\na single, shared scope for all xtypes. Third part components should consider using\na prefix to avoid collisions.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Foo.form.CoolButton', {\n    extend: '<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>',\n    xtype: 'ux-coolbutton',\n    text: 'Cool!'\n});\n</code></pre>\n\n<p>See <a href=\"#!/api/Ext.enums.Widget\" rel=\"Ext.enums.Widget\" class=\"docClass\">Ext.enums.Widget</a> for list of all available xtypes.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-defaultPreprocessors' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-property-defaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-property-defaultPreprocessors' class='name expandable'>defaultPreprocessors</a> : Array<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>[]</code></p></div></div></div><div id='property-preprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-property-preprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-property-preprocessors' class='name expandable'>preprocessors</a> : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>{}</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Ext.Class-method-constructor' class='name expandable'>Ext.Class</a>( <span class='pre'>data, onCreated</span> ) : <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new anonymous class. ...</div><div class='long'><p>Create a new anonymous class.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>An object represent the properties of this class</p>\n</div></li><li><span class='pre'>onCreated</span> : Function<div class='sub-desc'><p>Optional, the callback function to be executed when this class is fully created.\nNote that the creation process can be asynchronous depending on the pre-processors used.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a></span><div class='sub-desc'><p>The newly created class</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-method-create' class='name expandable'>create</a>( <span class='pre'>Class, data</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='method-getPreprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-method-getPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-method-getPreprocessors' class='name expandable'>getPreprocessors</a>( <span class='pre'></span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onBeforeCreated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-method-onBeforeCreated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-method-onBeforeCreated' class='name expandable'>onBeforeCreated</a>( <span class='pre'>Class, data, hooks</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>hooks</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='method-process' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-method-process' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-method-process' class='name expandable'>process</a>( <span class='pre'>Class, data, onCreated</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>onCreated</span> : Object<div class='sub-desc'></div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-getDefaultPreprocessors' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-static-method-getDefaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-static-method-getDefaultPreprocessors' class='name expandable'>getDefaultPreprocessors</a>( <span class='pre'></span> ) : Function[]<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Retrieve the array stack of default pre-processors ...</div><div class='long'><p>Retrieve the array stack of default pre-processors</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function[]</span><div class='sub-desc'><p>defaultPreprocessors</p>\n</div></li></ul></div></div></div><div id='static-method-getPreprocessor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-static-method-getPreprocessor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-static-method-getPreprocessor' class='name expandable'>getPreprocessor</a>( <span class='pre'>name</span> ) : Function<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Retrieve a pre-processor callback function by its name, which has been registered before ...</div><div class='long'><p>Retrieve a pre-processor callback function by its name, which has been registered before</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>preprocessor</p>\n</div></li></ul></div></div></div><div id='static-method-registerPreprocessor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-static-method-registerPreprocessor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-static-method-registerPreprocessor' class='name expandable'>registerPreprocessor</a>( <span class='pre'>name, fn</span> ) : <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Register a new pre-processor to be used during the class creation process ...</div><div class='long'><p>Register a new pre-processor to be used during the class creation process</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The pre-processor's name</p>\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The callback function to be executed. Typical format:</p>\n\n<pre><code>function(cls, data, fn) {\n    // Your code here\n\n    // Execute this when the processing is finished.\n    // Asynchronous processing is perfectly ok\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cls</span> : Function<div class='sub-desc'><p>The created class</p>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>The set of properties passed in <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> constructor</p>\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The callback function that <strong>must</strong> to be executed when this\npre-processor finishes, regardless of whether the processing is synchronous or asynchronous.</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-setDefaultPreprocessorPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-static-method-setDefaultPreprocessorPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-static-method-setDefaultPreprocessorPosition' class='name expandable'>setDefaultPreprocessorPosition</a>( <span class='pre'>name, offset, relativeName</span> ) : <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. ...</div><div class='long'><p>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">Ext.Class.registerPreprocessor</a>('debug', function(cls, data, fn) {\n    // Your code here\n\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n}).setDefaultPreprocessorPosition('debug', 'last');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The pre-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">registerPreprocessor</a> before this</p>\n</div></li><li><span class='pre'>offset</span> : String<div class='sub-desc'><p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)</p>\n</div></li><li><span class='pre'>relativeName</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-setDefaultPreprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Class'>Ext.Class</span><br/><a href='source/Class.html#Ext-Class-static-method-setDefaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Class-static-method-setDefaultPreprocessors' class='name expandable'>setDefaultPreprocessors</a>( <span class='pre'>preprocessors</span> ) : <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Set the default array stack of default pre-processors ...</div><div class='long'><p>Set the default array stack of default pre-processors</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>preprocessors</span> : Array<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});